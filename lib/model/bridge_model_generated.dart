// automatically generated by the FlatBuffers compiler, do not modify
// ignore_for_file: unused_import, unused_field, unused_element, unused_local_variable

library model;

import 'dart:typed_data' show Uint8List;
import 'package:flat_buffers/flat_buffers.dart' as fb;

class Algorithm {
  final int value;
  const Algorithm._(this.value);

  factory Algorithm.fromValue(int value) {
    final result = values[value];
    if (result == null) {
      throw StateError('Invalid value $value for bit flag enum Algorithm');
    }
    return result;
  }

  static Algorithm? _createOrNull(int? value) =>
      value == null ? null : Algorithm.fromValue(value);

  static const int minValue = 0;
  static const int maxValue = 5;
  static bool containsValue(int value) => values.containsKey(value);

  static const Algorithm RSA = Algorithm._(0);
  static const Algorithm ECDSA = Algorithm._(1);
  static const Algorithm EDDSA = Algorithm._(2);
  static const Algorithm ECHD = Algorithm._(3);
  static const Algorithm DSA = Algorithm._(4);
  static const Algorithm ELGAMAL = Algorithm._(5);
  static const Map<int, Algorithm> values = {
    0: RSA,
    1: ECDSA,
    2: EDDSA,
    3: ECHD,
    4: DSA,
    5: ELGAMAL
  };

  static const fb.Reader<Algorithm> reader = _AlgorithmReader();

  @override
  String toString() {
    return 'Algorithm{value: $value}';
  }
}

class _AlgorithmReader extends fb.Reader<Algorithm> {
  const _AlgorithmReader();

  @override
  int get size => 4;

  @override
  Algorithm read(fb.BufferContext bc, int offset) =>
      Algorithm.fromValue(const fb.Int32Reader().read(bc, offset));
}

class Curve {
  final int value;
  const Curve._(this.value);

  factory Curve.fromValue(int value) {
    final result = values[value];
    if (result == null) {
      throw StateError('Invalid value $value for bit flag enum Curve');
    }
    return result;
  }

  static Curve? _createOrNull(int? value) =>
      value == null ? null : Curve.fromValue(value);

  static const int minValue = 0;
  static const int maxValue = 8;
  static bool containsValue(int value) => values.containsKey(value);

  static const Curve CURVE25519 = Curve._(0);
  static const Curve CURVE448 = Curve._(1);
  static const Curve P256 = Curve._(2);
  static const Curve P384 = Curve._(3);
  static const Curve P521 = Curve._(4);
  static const Curve SECP256K1 = Curve._(5);
  static const Curve BRAINPOOLP256 = Curve._(6);
  static const Curve BRAINPOOLP384 = Curve._(7);
  static const Curve BRAINPOOLP512 = Curve._(8);
  static const Map<int, Curve> values = {
    0: CURVE25519,
    1: CURVE448,
    2: P256,
    3: P384,
    4: P521,
    5: SECP256K1,
    6: BRAINPOOLP256,
    7: BRAINPOOLP384,
    8: BRAINPOOLP512
  };

  static const fb.Reader<Curve> reader = _CurveReader();

  @override
  String toString() {
    return 'Curve{value: $value}';
  }
}

class _CurveReader extends fb.Reader<Curve> {
  const _CurveReader();

  @override
  int get size => 4;

  @override
  Curve read(fb.BufferContext bc, int offset) =>
      Curve.fromValue(const fb.Int32Reader().read(bc, offset));
}

class Hash {
  final int value;
  const Hash._(this.value);

  factory Hash.fromValue(int value) {
    final result = values[value];
    if (result == null) {
      throw StateError('Invalid value $value for bit flag enum Hash');
    }
    return result;
  }

  static Hash? _createOrNull(int? value) =>
      value == null ? null : Hash.fromValue(value);

  static const int minValue = 0;
  static const int maxValue = 3;
  static bool containsValue(int value) => values.containsKey(value);

  static const Hash SHA256 = Hash._(0);
  static const Hash SHA224 = Hash._(1);
  static const Hash SHA384 = Hash._(2);
  static const Hash SHA512 = Hash._(3);
  static const Map<int, Hash> values = {
    0: SHA256,
    1: SHA224,
    2: SHA384,
    3: SHA512
  };

  static const fb.Reader<Hash> reader = _HashReader();

  @override
  String toString() {
    return 'Hash{value: $value}';
  }
}

class _HashReader extends fb.Reader<Hash> {
  const _HashReader();

  @override
  int get size => 4;

  @override
  Hash read(fb.BufferContext bc, int offset) =>
      Hash.fromValue(const fb.Int32Reader().read(bc, offset));
}

class Compression {
  final int value;
  const Compression._(this.value);

  factory Compression.fromValue(int value) {
    final result = values[value];
    if (result == null) {
      throw StateError('Invalid value $value for bit flag enum Compression');
    }
    return result;
  }

  static Compression? _createOrNull(int? value) =>
      value == null ? null : Compression.fromValue(value);

  static const int minValue = 0;
  static const int maxValue = 2;
  static bool containsValue(int value) => values.containsKey(value);

  static const Compression NONE = Compression._(0);
  static const Compression ZLIB = Compression._(1);
  static const Compression ZIP = Compression._(2);
  static const Map<int, Compression> values = {0: NONE, 1: ZLIB, 2: ZIP};

  static const fb.Reader<Compression> reader = _CompressionReader();

  @override
  String toString() {
    return 'Compression{value: $value}';
  }
}

class _CompressionReader extends fb.Reader<Compression> {
  const _CompressionReader();

  @override
  int get size => 4;

  @override
  Compression read(fb.BufferContext bc, int offset) =>
      Compression.fromValue(const fb.Int32Reader().read(bc, offset));
}

class Cipher {
  final int value;
  const Cipher._(this.value);

  factory Cipher.fromValue(int value) {
    final result = values[value];
    if (result == null) {
      throw StateError('Invalid value $value for bit flag enum Cipher');
    }
    return result;
  }

  static Cipher? _createOrNull(int? value) =>
      value == null ? null : Cipher.fromValue(value);

  static const int minValue = 0;
  static const int maxValue = 4;
  static bool containsValue(int value) => values.containsKey(value);

  static const Cipher AES128 = Cipher._(0);
  static const Cipher AES192 = Cipher._(1);
  static const Cipher AES256 = Cipher._(2);
  static const Cipher DES = Cipher._(3);
  static const Cipher CAST5 = Cipher._(4);
  static const Map<int, Cipher> values = {
    0: AES128,
    1: AES192,
    2: AES256,
    3: DES,
    4: CAST5
  };

  static const fb.Reader<Cipher> reader = _CipherReader();

  @override
  String toString() {
    return 'Cipher{value: $value}';
  }
}

class _CipherReader extends fb.Reader<Cipher> {
  const _CipherReader();

  @override
  int get size => 4;

  @override
  Cipher read(fb.BufferContext bc, int offset) =>
      Cipher.fromValue(const fb.Int32Reader().read(bc, offset));
}

class EncryptRequest {
  EncryptRequest._(this._bc, this._bcOffset);
  factory EncryptRequest(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<EncryptRequest> reader = _EncryptRequestReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  String? get message =>
      const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  String? get publicKey =>
      const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 6);
  KeyOptions? get options =>
      KeyOptions.reader.vTableGetNullable(_bc, _bcOffset, 8);
  Entity? get signed => Entity.reader.vTableGetNullable(_bc, _bcOffset, 10);
  FileHints? get fileHints =>
      FileHints.reader.vTableGetNullable(_bc, _bcOffset, 12);

  @override
  String toString() {
    return 'EncryptRequest{message: ${message}, publicKey: ${publicKey}, options: ${options}, signed: ${signed}, fileHints: ${fileHints}}';
  }
}

class _EncryptRequestReader extends fb.TableReader<EncryptRequest> {
  const _EncryptRequestReader();

  @override
  EncryptRequest createObject(fb.BufferContext bc, int offset) =>
      EncryptRequest._(bc, offset);
}

class EncryptRequestBuilder {
  EncryptRequestBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(5);
  }

  int addMessageOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }

  int addPublicKeyOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }

  int addOptionsOffset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }

  int addSignedOffset(int? offset) {
    fbBuilder.addOffset(3, offset);
    return fbBuilder.offset;
  }

  int addFileHintsOffset(int? offset) {
    fbBuilder.addOffset(4, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class EncryptRequestObjectBuilder extends fb.ObjectBuilder {
  final String? _message;
  final String? _publicKey;
  final KeyOptionsObjectBuilder? _options;
  final EntityObjectBuilder? _signed;
  final FileHintsObjectBuilder? _fileHints;

  EncryptRequestObjectBuilder({
    String? message,
    String? publicKey,
    KeyOptionsObjectBuilder? options,
    EntityObjectBuilder? signed,
    FileHintsObjectBuilder? fileHints,
  })  : _message = message,
        _publicKey = publicKey,
        _options = options,
        _signed = signed,
        _fileHints = fileHints;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? messageOffset =
        _message == null ? null : fbBuilder.writeString(_message!);
    final int? publicKeyOffset =
        _publicKey == null ? null : fbBuilder.writeString(_publicKey!);
    final int? optionsOffset = _options?.getOrCreateOffset(fbBuilder);
    final int? signedOffset = _signed?.getOrCreateOffset(fbBuilder);
    final int? fileHintsOffset = _fileHints?.getOrCreateOffset(fbBuilder);
    fbBuilder.startTable(5);
    fbBuilder.addOffset(0, messageOffset);
    fbBuilder.addOffset(1, publicKeyOffset);
    fbBuilder.addOffset(2, optionsOffset);
    fbBuilder.addOffset(3, signedOffset);
    fbBuilder.addOffset(4, fileHintsOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}

class EncryptFileRequest {
  EncryptFileRequest._(this._bc, this._bcOffset);
  factory EncryptFileRequest(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<EncryptFileRequest> reader =
      _EncryptFileRequestReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  String? get input =>
      const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  String? get output =>
      const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 6);
  String? get publicKey =>
      const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 8);
  KeyOptions? get options =>
      KeyOptions.reader.vTableGetNullable(_bc, _bcOffset, 10);
  Entity? get signed => Entity.reader.vTableGetNullable(_bc, _bcOffset, 12);
  FileHints? get fileHints =>
      FileHints.reader.vTableGetNullable(_bc, _bcOffset, 14);

  @override
  String toString() {
    return 'EncryptFileRequest{input: ${input}, output: ${output}, publicKey: ${publicKey}, options: ${options}, signed: ${signed}, fileHints: ${fileHints}}';
  }
}

class _EncryptFileRequestReader extends fb.TableReader<EncryptFileRequest> {
  const _EncryptFileRequestReader();

  @override
  EncryptFileRequest createObject(fb.BufferContext bc, int offset) =>
      EncryptFileRequest._(bc, offset);
}

class EncryptFileRequestBuilder {
  EncryptFileRequestBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(6);
  }

  int addInputOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }

  int addOutputOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }

  int addPublicKeyOffset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }

  int addOptionsOffset(int? offset) {
    fbBuilder.addOffset(3, offset);
    return fbBuilder.offset;
  }

  int addSignedOffset(int? offset) {
    fbBuilder.addOffset(4, offset);
    return fbBuilder.offset;
  }

  int addFileHintsOffset(int? offset) {
    fbBuilder.addOffset(5, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class EncryptFileRequestObjectBuilder extends fb.ObjectBuilder {
  final String? _input;
  final String? _output;
  final String? _publicKey;
  final KeyOptionsObjectBuilder? _options;
  final EntityObjectBuilder? _signed;
  final FileHintsObjectBuilder? _fileHints;

  EncryptFileRequestObjectBuilder({
    String? input,
    String? output,
    String? publicKey,
    KeyOptionsObjectBuilder? options,
    EntityObjectBuilder? signed,
    FileHintsObjectBuilder? fileHints,
  })  : _input = input,
        _output = output,
        _publicKey = publicKey,
        _options = options,
        _signed = signed,
        _fileHints = fileHints;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? inputOffset =
        _input == null ? null : fbBuilder.writeString(_input!);
    final int? outputOffset =
        _output == null ? null : fbBuilder.writeString(_output!);
    final int? publicKeyOffset =
        _publicKey == null ? null : fbBuilder.writeString(_publicKey!);
    final int? optionsOffset = _options?.getOrCreateOffset(fbBuilder);
    final int? signedOffset = _signed?.getOrCreateOffset(fbBuilder);
    final int? fileHintsOffset = _fileHints?.getOrCreateOffset(fbBuilder);
    fbBuilder.startTable(6);
    fbBuilder.addOffset(0, inputOffset);
    fbBuilder.addOffset(1, outputOffset);
    fbBuilder.addOffset(2, publicKeyOffset);
    fbBuilder.addOffset(3, optionsOffset);
    fbBuilder.addOffset(4, signedOffset);
    fbBuilder.addOffset(5, fileHintsOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}

class EncryptBytesRequest {
  EncryptBytesRequest._(this._bc, this._bcOffset);
  factory EncryptBytesRequest(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<EncryptBytesRequest> reader =
      _EncryptBytesRequestReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  List<int>? get message =>
      const fb.Uint8ListReader().vTableGetNullable(_bc, _bcOffset, 4);
  String? get publicKey =>
      const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 6);
  KeyOptions? get options =>
      KeyOptions.reader.vTableGetNullable(_bc, _bcOffset, 8);
  Entity? get signed => Entity.reader.vTableGetNullable(_bc, _bcOffset, 10);
  FileHints? get fileHints =>
      FileHints.reader.vTableGetNullable(_bc, _bcOffset, 12);

  @override
  String toString() {
    return 'EncryptBytesRequest{message: ${message}, publicKey: ${publicKey}, options: ${options}, signed: ${signed}, fileHints: ${fileHints}}';
  }
}

class _EncryptBytesRequestReader extends fb.TableReader<EncryptBytesRequest> {
  const _EncryptBytesRequestReader();

  @override
  EncryptBytesRequest createObject(fb.BufferContext bc, int offset) =>
      EncryptBytesRequest._(bc, offset);
}

class EncryptBytesRequestBuilder {
  EncryptBytesRequestBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(5);
  }

  int addMessageOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }

  int addPublicKeyOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }

  int addOptionsOffset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }

  int addSignedOffset(int? offset) {
    fbBuilder.addOffset(3, offset);
    return fbBuilder.offset;
  }

  int addFileHintsOffset(int? offset) {
    fbBuilder.addOffset(4, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class EncryptBytesRequestObjectBuilder extends fb.ObjectBuilder {
  final List<int>? _message;
  final String? _publicKey;
  final KeyOptionsObjectBuilder? _options;
  final EntityObjectBuilder? _signed;
  final FileHintsObjectBuilder? _fileHints;

  EncryptBytesRequestObjectBuilder({
    List<int>? message,
    String? publicKey,
    KeyOptionsObjectBuilder? options,
    EntityObjectBuilder? signed,
    FileHintsObjectBuilder? fileHints,
  })  : _message = message,
        _publicKey = publicKey,
        _options = options,
        _signed = signed,
        _fileHints = fileHints;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? messageOffset =
        _message == null ? null : fbBuilder.writeListUint8(_message!);
    final int? publicKeyOffset =
        _publicKey == null ? null : fbBuilder.writeString(_publicKey!);
    final int? optionsOffset = _options?.getOrCreateOffset(fbBuilder);
    final int? signedOffset = _signed?.getOrCreateOffset(fbBuilder);
    final int? fileHintsOffset = _fileHints?.getOrCreateOffset(fbBuilder);
    fbBuilder.startTable(5);
    fbBuilder.addOffset(0, messageOffset);
    fbBuilder.addOffset(1, publicKeyOffset);
    fbBuilder.addOffset(2, optionsOffset);
    fbBuilder.addOffset(3, signedOffset);
    fbBuilder.addOffset(4, fileHintsOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}

class DecryptRequest {
  DecryptRequest._(this._bc, this._bcOffset);
  factory DecryptRequest(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<DecryptRequest> reader = _DecryptRequestReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  String? get message =>
      const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  String? get privateKey =>
      const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 6);
  String? get passphrase =>
      const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 8);
  KeyOptions? get options =>
      KeyOptions.reader.vTableGetNullable(_bc, _bcOffset, 10);
  Entity? get signed => Entity.reader.vTableGetNullable(_bc, _bcOffset, 12);

  @override
  String toString() {
    return 'DecryptRequest{message: ${message}, privateKey: ${privateKey}, passphrase: ${passphrase}, options: ${options}, signed: ${signed}}';
  }
}

class _DecryptRequestReader extends fb.TableReader<DecryptRequest> {
  const _DecryptRequestReader();

  @override
  DecryptRequest createObject(fb.BufferContext bc, int offset) =>
      DecryptRequest._(bc, offset);
}

class DecryptRequestBuilder {
  DecryptRequestBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(5);
  }

  int addMessageOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }

  int addPrivateKeyOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }

  int addPassphraseOffset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }

  int addOptionsOffset(int? offset) {
    fbBuilder.addOffset(3, offset);
    return fbBuilder.offset;
  }

  int addSignedOffset(int? offset) {
    fbBuilder.addOffset(4, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class DecryptRequestObjectBuilder extends fb.ObjectBuilder {
  final String? _message;
  final String? _privateKey;
  final String? _passphrase;
  final KeyOptionsObjectBuilder? _options;
  final EntityObjectBuilder? _signed;

  DecryptRequestObjectBuilder({
    String? message,
    String? privateKey,
    String? passphrase,
    KeyOptionsObjectBuilder? options,
    EntityObjectBuilder? signed,
  })  : _message = message,
        _privateKey = privateKey,
        _passphrase = passphrase,
        _options = options,
        _signed = signed;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? messageOffset =
        _message == null ? null : fbBuilder.writeString(_message!);
    final int? privateKeyOffset =
        _privateKey == null ? null : fbBuilder.writeString(_privateKey!);
    final int? passphraseOffset =
        _passphrase == null ? null : fbBuilder.writeString(_passphrase!);
    final int? optionsOffset = _options?.getOrCreateOffset(fbBuilder);
    final int? signedOffset = _signed?.getOrCreateOffset(fbBuilder);
    fbBuilder.startTable(5);
    fbBuilder.addOffset(0, messageOffset);
    fbBuilder.addOffset(1, privateKeyOffset);
    fbBuilder.addOffset(2, passphraseOffset);
    fbBuilder.addOffset(3, optionsOffset);
    fbBuilder.addOffset(4, signedOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}

class DecryptFileRequest {
  DecryptFileRequest._(this._bc, this._bcOffset);
  factory DecryptFileRequest(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<DecryptFileRequest> reader =
      _DecryptFileRequestReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  String? get input =>
      const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  String? get output =>
      const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 6);
  String? get privateKey =>
      const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 8);
  String? get passphrase =>
      const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 10);
  KeyOptions? get options =>
      KeyOptions.reader.vTableGetNullable(_bc, _bcOffset, 12);
  Entity? get signed => Entity.reader.vTableGetNullable(_bc, _bcOffset, 14);

  @override
  String toString() {
    return 'DecryptFileRequest{input: ${input}, output: ${output}, privateKey: ${privateKey}, passphrase: ${passphrase}, options: ${options}, signed: ${signed}}';
  }
}

class _DecryptFileRequestReader extends fb.TableReader<DecryptFileRequest> {
  const _DecryptFileRequestReader();

  @override
  DecryptFileRequest createObject(fb.BufferContext bc, int offset) =>
      DecryptFileRequest._(bc, offset);
}

class DecryptFileRequestBuilder {
  DecryptFileRequestBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(6);
  }

  int addInputOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }

  int addOutputOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }

  int addPrivateKeyOffset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }

  int addPassphraseOffset(int? offset) {
    fbBuilder.addOffset(3, offset);
    return fbBuilder.offset;
  }

  int addOptionsOffset(int? offset) {
    fbBuilder.addOffset(4, offset);
    return fbBuilder.offset;
  }

  int addSignedOffset(int? offset) {
    fbBuilder.addOffset(5, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class DecryptFileRequestObjectBuilder extends fb.ObjectBuilder {
  final String? _input;
  final String? _output;
  final String? _privateKey;
  final String? _passphrase;
  final KeyOptionsObjectBuilder? _options;
  final EntityObjectBuilder? _signed;

  DecryptFileRequestObjectBuilder({
    String? input,
    String? output,
    String? privateKey,
    String? passphrase,
    KeyOptionsObjectBuilder? options,
    EntityObjectBuilder? signed,
  })  : _input = input,
        _output = output,
        _privateKey = privateKey,
        _passphrase = passphrase,
        _options = options,
        _signed = signed;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? inputOffset =
        _input == null ? null : fbBuilder.writeString(_input!);
    final int? outputOffset =
        _output == null ? null : fbBuilder.writeString(_output!);
    final int? privateKeyOffset =
        _privateKey == null ? null : fbBuilder.writeString(_privateKey!);
    final int? passphraseOffset =
        _passphrase == null ? null : fbBuilder.writeString(_passphrase!);
    final int? optionsOffset = _options?.getOrCreateOffset(fbBuilder);
    final int? signedOffset = _signed?.getOrCreateOffset(fbBuilder);
    fbBuilder.startTable(6);
    fbBuilder.addOffset(0, inputOffset);
    fbBuilder.addOffset(1, outputOffset);
    fbBuilder.addOffset(2, privateKeyOffset);
    fbBuilder.addOffset(3, passphraseOffset);
    fbBuilder.addOffset(4, optionsOffset);
    fbBuilder.addOffset(5, signedOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}

class DecryptBytesRequest {
  DecryptBytesRequest._(this._bc, this._bcOffset);
  factory DecryptBytesRequest(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<DecryptBytesRequest> reader =
      _DecryptBytesRequestReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  List<int>? get message =>
      const fb.Uint8ListReader().vTableGetNullable(_bc, _bcOffset, 4);
  String? get privateKey =>
      const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 6);
  String? get passphrase =>
      const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 8);
  KeyOptions? get options =>
      KeyOptions.reader.vTableGetNullable(_bc, _bcOffset, 10);
  Entity? get signed => Entity.reader.vTableGetNullable(_bc, _bcOffset, 12);

  @override
  String toString() {
    return 'DecryptBytesRequest{message: ${message}, privateKey: ${privateKey}, passphrase: ${passphrase}, options: ${options}, signed: ${signed}}';
  }
}

class _DecryptBytesRequestReader extends fb.TableReader<DecryptBytesRequest> {
  const _DecryptBytesRequestReader();

  @override
  DecryptBytesRequest createObject(fb.BufferContext bc, int offset) =>
      DecryptBytesRequest._(bc, offset);
}

class DecryptBytesRequestBuilder {
  DecryptBytesRequestBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(5);
  }

  int addMessageOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }

  int addPrivateKeyOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }

  int addPassphraseOffset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }

  int addOptionsOffset(int? offset) {
    fbBuilder.addOffset(3, offset);
    return fbBuilder.offset;
  }

  int addSignedOffset(int? offset) {
    fbBuilder.addOffset(4, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class DecryptBytesRequestObjectBuilder extends fb.ObjectBuilder {
  final List<int>? _message;
  final String? _privateKey;
  final String? _passphrase;
  final KeyOptionsObjectBuilder? _options;
  final EntityObjectBuilder? _signed;

  DecryptBytesRequestObjectBuilder({
    List<int>? message,
    String? privateKey,
    String? passphrase,
    KeyOptionsObjectBuilder? options,
    EntityObjectBuilder? signed,
  })  : _message = message,
        _privateKey = privateKey,
        _passphrase = passphrase,
        _options = options,
        _signed = signed;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? messageOffset =
        _message == null ? null : fbBuilder.writeListUint8(_message!);
    final int? privateKeyOffset =
        _privateKey == null ? null : fbBuilder.writeString(_privateKey!);
    final int? passphraseOffset =
        _passphrase == null ? null : fbBuilder.writeString(_passphrase!);
    final int? optionsOffset = _options?.getOrCreateOffset(fbBuilder);
    final int? signedOffset = _signed?.getOrCreateOffset(fbBuilder);
    fbBuilder.startTable(5);
    fbBuilder.addOffset(0, messageOffset);
    fbBuilder.addOffset(1, privateKeyOffset);
    fbBuilder.addOffset(2, passphraseOffset);
    fbBuilder.addOffset(3, optionsOffset);
    fbBuilder.addOffset(4, signedOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}

class SignRequest {
  SignRequest._(this._bc, this._bcOffset);
  factory SignRequest(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<SignRequest> reader = _SignRequestReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  String? get message =>
      const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  String? get privateKey =>
      const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 8);
  String? get passphrase =>
      const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 10);
  KeyOptions? get options =>
      KeyOptions.reader.vTableGetNullable(_bc, _bcOffset, 12);

  @override
  String toString() {
    return 'SignRequest{message: ${message}, privateKey: ${privateKey}, passphrase: ${passphrase}, options: ${options}}';
  }
}

class _SignRequestReader extends fb.TableReader<SignRequest> {
  const _SignRequestReader();

  @override
  SignRequest createObject(fb.BufferContext bc, int offset) =>
      SignRequest._(bc, offset);
}

class SignRequestBuilder {
  SignRequestBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(5);
  }

  int addMessageOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }

  int addPrivateKeyOffset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }

  int addPassphraseOffset(int? offset) {
    fbBuilder.addOffset(3, offset);
    return fbBuilder.offset;
  }

  int addOptionsOffset(int? offset) {
    fbBuilder.addOffset(4, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class SignRequestObjectBuilder extends fb.ObjectBuilder {
  final String? _message;
  final String? _privateKey;
  final String? _passphrase;
  final KeyOptionsObjectBuilder? _options;

  SignRequestObjectBuilder({
    String? message,
    String? privateKey,
    String? passphrase,
    KeyOptionsObjectBuilder? options,
  })  : _message = message,
        _privateKey = privateKey,
        _passphrase = passphrase,
        _options = options;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? messageOffset =
        _message == null ? null : fbBuilder.writeString(_message!);
    final int? privateKeyOffset =
        _privateKey == null ? null : fbBuilder.writeString(_privateKey!);
    final int? passphraseOffset =
        _passphrase == null ? null : fbBuilder.writeString(_passphrase!);
    final int? optionsOffset = _options?.getOrCreateOffset(fbBuilder);
    fbBuilder.startTable(5);
    fbBuilder.addOffset(0, messageOffset);
    fbBuilder.addOffset(2, privateKeyOffset);
    fbBuilder.addOffset(3, passphraseOffset);
    fbBuilder.addOffset(4, optionsOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}

class SignFileRequest {
  SignFileRequest._(this._bc, this._bcOffset);
  factory SignFileRequest(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<SignFileRequest> reader = _SignFileRequestReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  String? get input =>
      const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  String? get privateKey =>
      const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 8);
  String? get passphrase =>
      const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 10);
  KeyOptions? get options =>
      KeyOptions.reader.vTableGetNullable(_bc, _bcOffset, 12);

  @override
  String toString() {
    return 'SignFileRequest{input: ${input}, privateKey: ${privateKey}, passphrase: ${passphrase}, options: ${options}}';
  }
}

class _SignFileRequestReader extends fb.TableReader<SignFileRequest> {
  const _SignFileRequestReader();

  @override
  SignFileRequest createObject(fb.BufferContext bc, int offset) =>
      SignFileRequest._(bc, offset);
}

class SignFileRequestBuilder {
  SignFileRequestBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(5);
  }

  int addInputOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }

  int addPrivateKeyOffset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }

  int addPassphraseOffset(int? offset) {
    fbBuilder.addOffset(3, offset);
    return fbBuilder.offset;
  }

  int addOptionsOffset(int? offset) {
    fbBuilder.addOffset(4, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class SignFileRequestObjectBuilder extends fb.ObjectBuilder {
  final String? _input;
  final String? _privateKey;
  final String? _passphrase;
  final KeyOptionsObjectBuilder? _options;

  SignFileRequestObjectBuilder({
    String? input,
    String? privateKey,
    String? passphrase,
    KeyOptionsObjectBuilder? options,
  })  : _input = input,
        _privateKey = privateKey,
        _passphrase = passphrase,
        _options = options;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? inputOffset =
        _input == null ? null : fbBuilder.writeString(_input!);
    final int? privateKeyOffset =
        _privateKey == null ? null : fbBuilder.writeString(_privateKey!);
    final int? passphraseOffset =
        _passphrase == null ? null : fbBuilder.writeString(_passphrase!);
    final int? optionsOffset = _options?.getOrCreateOffset(fbBuilder);
    fbBuilder.startTable(5);
    fbBuilder.addOffset(0, inputOffset);
    fbBuilder.addOffset(2, privateKeyOffset);
    fbBuilder.addOffset(3, passphraseOffset);
    fbBuilder.addOffset(4, optionsOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}

class SignBytesRequest {
  SignBytesRequest._(this._bc, this._bcOffset);
  factory SignBytesRequest(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<SignBytesRequest> reader = _SignBytesRequestReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  List<int>? get message =>
      const fb.Uint8ListReader().vTableGetNullable(_bc, _bcOffset, 4);
  String? get privateKey =>
      const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 8);
  String? get passphrase =>
      const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 10);
  KeyOptions? get options =>
      KeyOptions.reader.vTableGetNullable(_bc, _bcOffset, 12);

  @override
  String toString() {
    return 'SignBytesRequest{message: ${message}, privateKey: ${privateKey}, passphrase: ${passphrase}, options: ${options}}';
  }
}

class _SignBytesRequestReader extends fb.TableReader<SignBytesRequest> {
  const _SignBytesRequestReader();

  @override
  SignBytesRequest createObject(fb.BufferContext bc, int offset) =>
      SignBytesRequest._(bc, offset);
}

class SignBytesRequestBuilder {
  SignBytesRequestBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(5);
  }

  int addMessageOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }

  int addPrivateKeyOffset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }

  int addPassphraseOffset(int? offset) {
    fbBuilder.addOffset(3, offset);
    return fbBuilder.offset;
  }

  int addOptionsOffset(int? offset) {
    fbBuilder.addOffset(4, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class SignBytesRequestObjectBuilder extends fb.ObjectBuilder {
  final List<int>? _message;
  final String? _privateKey;
  final String? _passphrase;
  final KeyOptionsObjectBuilder? _options;

  SignBytesRequestObjectBuilder({
    List<int>? message,
    String? privateKey,
    String? passphrase,
    KeyOptionsObjectBuilder? options,
  })  : _message = message,
        _privateKey = privateKey,
        _passphrase = passphrase,
        _options = options;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? messageOffset =
        _message == null ? null : fbBuilder.writeListUint8(_message!);
    final int? privateKeyOffset =
        _privateKey == null ? null : fbBuilder.writeString(_privateKey!);
    final int? passphraseOffset =
        _passphrase == null ? null : fbBuilder.writeString(_passphrase!);
    final int? optionsOffset = _options?.getOrCreateOffset(fbBuilder);
    fbBuilder.startTable(5);
    fbBuilder.addOffset(0, messageOffset);
    fbBuilder.addOffset(2, privateKeyOffset);
    fbBuilder.addOffset(3, passphraseOffset);
    fbBuilder.addOffset(4, optionsOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}

class SignDataRequest {
  SignDataRequest._(this._bc, this._bcOffset);
  factory SignDataRequest(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<SignDataRequest> reader = _SignDataRequestReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  String? get message =>
      const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  String? get privateKey =>
      const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 6);
  String? get passphrase =>
      const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 8);
  KeyOptions? get options =>
      KeyOptions.reader.vTableGetNullable(_bc, _bcOffset, 10);

  @override
  String toString() {
    return 'SignDataRequest{message: ${message}, privateKey: ${privateKey}, passphrase: ${passphrase}, options: ${options}}';
  }
}

class _SignDataRequestReader extends fb.TableReader<SignDataRequest> {
  const _SignDataRequestReader();

  @override
  SignDataRequest createObject(fb.BufferContext bc, int offset) =>
      SignDataRequest._(bc, offset);
}

class SignDataRequestBuilder {
  SignDataRequestBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(4);
  }

  int addMessageOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }

  int addPrivateKeyOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }

  int addPassphraseOffset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }

  int addOptionsOffset(int? offset) {
    fbBuilder.addOffset(3, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class SignDataRequestObjectBuilder extends fb.ObjectBuilder {
  final String? _message;
  final String? _privateKey;
  final String? _passphrase;
  final KeyOptionsObjectBuilder? _options;

  SignDataRequestObjectBuilder({
    String? message,
    String? privateKey,
    String? passphrase,
    KeyOptionsObjectBuilder? options,
  })  : _message = message,
        _privateKey = privateKey,
        _passphrase = passphrase,
        _options = options;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? messageOffset =
        _message == null ? null : fbBuilder.writeString(_message!);
    final int? privateKeyOffset =
        _privateKey == null ? null : fbBuilder.writeString(_privateKey!);
    final int? passphraseOffset =
        _passphrase == null ? null : fbBuilder.writeString(_passphrase!);
    final int? optionsOffset = _options?.getOrCreateOffset(fbBuilder);
    fbBuilder.startTable(4);
    fbBuilder.addOffset(0, messageOffset);
    fbBuilder.addOffset(1, privateKeyOffset);
    fbBuilder.addOffset(2, passphraseOffset);
    fbBuilder.addOffset(3, optionsOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}

class SignDataBytesRequest {
  SignDataBytesRequest._(this._bc, this._bcOffset);
  factory SignDataBytesRequest(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<SignDataBytesRequest> reader =
      _SignDataBytesRequestReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  List<int>? get message =>
      const fb.Uint8ListReader().vTableGetNullable(_bc, _bcOffset, 4);
  String? get privateKey =>
      const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 6);
  String? get passphrase =>
      const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 8);
  KeyOptions? get options =>
      KeyOptions.reader.vTableGetNullable(_bc, _bcOffset, 10);

  @override
  String toString() {
    return 'SignDataBytesRequest{message: ${message}, privateKey: ${privateKey}, passphrase: ${passphrase}, options: ${options}}';
  }
}

class _SignDataBytesRequestReader extends fb.TableReader<SignDataBytesRequest> {
  const _SignDataBytesRequestReader();

  @override
  SignDataBytesRequest createObject(fb.BufferContext bc, int offset) =>
      SignDataBytesRequest._(bc, offset);
}

class SignDataBytesRequestBuilder {
  SignDataBytesRequestBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(4);
  }

  int addMessageOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }

  int addPrivateKeyOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }

  int addPassphraseOffset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }

  int addOptionsOffset(int? offset) {
    fbBuilder.addOffset(3, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class SignDataBytesRequestObjectBuilder extends fb.ObjectBuilder {
  final List<int>? _message;
  final String? _privateKey;
  final String? _passphrase;
  final KeyOptionsObjectBuilder? _options;

  SignDataBytesRequestObjectBuilder({
    List<int>? message,
    String? privateKey,
    String? passphrase,
    KeyOptionsObjectBuilder? options,
  })  : _message = message,
        _privateKey = privateKey,
        _passphrase = passphrase,
        _options = options;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? messageOffset =
        _message == null ? null : fbBuilder.writeListUint8(_message!);
    final int? privateKeyOffset =
        _privateKey == null ? null : fbBuilder.writeString(_privateKey!);
    final int? passphraseOffset =
        _passphrase == null ? null : fbBuilder.writeString(_passphrase!);
    final int? optionsOffset = _options?.getOrCreateOffset(fbBuilder);
    fbBuilder.startTable(4);
    fbBuilder.addOffset(0, messageOffset);
    fbBuilder.addOffset(1, privateKeyOffset);
    fbBuilder.addOffset(2, passphraseOffset);
    fbBuilder.addOffset(3, optionsOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}

class VerifyRequest {
  VerifyRequest._(this._bc, this._bcOffset);
  factory VerifyRequest(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<VerifyRequest> reader = _VerifyRequestReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  String? get signature =>
      const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  String? get message =>
      const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 6);
  String? get publicKey =>
      const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 8);

  @override
  String toString() {
    return 'VerifyRequest{signature: ${signature}, message: ${message}, publicKey: ${publicKey}}';
  }
}

class _VerifyRequestReader extends fb.TableReader<VerifyRequest> {
  const _VerifyRequestReader();

  @override
  VerifyRequest createObject(fb.BufferContext bc, int offset) =>
      VerifyRequest._(bc, offset);
}

class VerifyRequestBuilder {
  VerifyRequestBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(3);
  }

  int addSignatureOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }

  int addMessageOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }

  int addPublicKeyOffset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class VerifyRequestObjectBuilder extends fb.ObjectBuilder {
  final String? _signature;
  final String? _message;
  final String? _publicKey;

  VerifyRequestObjectBuilder({
    String? signature,
    String? message,
    String? publicKey,
  })  : _signature = signature,
        _message = message,
        _publicKey = publicKey;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? signatureOffset =
        _signature == null ? null : fbBuilder.writeString(_signature!);
    final int? messageOffset =
        _message == null ? null : fbBuilder.writeString(_message!);
    final int? publicKeyOffset =
        _publicKey == null ? null : fbBuilder.writeString(_publicKey!);
    fbBuilder.startTable(3);
    fbBuilder.addOffset(0, signatureOffset);
    fbBuilder.addOffset(1, messageOffset);
    fbBuilder.addOffset(2, publicKeyOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}

class VerifyFileRequest {
  VerifyFileRequest._(this._bc, this._bcOffset);
  factory VerifyFileRequest(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<VerifyFileRequest> reader = _VerifyFileRequestReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  String? get signature =>
      const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  String? get input =>
      const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 6);
  String? get publicKey =>
      const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 8);

  @override
  String toString() {
    return 'VerifyFileRequest{signature: ${signature}, input: ${input}, publicKey: ${publicKey}}';
  }
}

class _VerifyFileRequestReader extends fb.TableReader<VerifyFileRequest> {
  const _VerifyFileRequestReader();

  @override
  VerifyFileRequest createObject(fb.BufferContext bc, int offset) =>
      VerifyFileRequest._(bc, offset);
}

class VerifyFileRequestBuilder {
  VerifyFileRequestBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(3);
  }

  int addSignatureOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }

  int addInputOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }

  int addPublicKeyOffset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class VerifyFileRequestObjectBuilder extends fb.ObjectBuilder {
  final String? _signature;
  final String? _input;
  final String? _publicKey;

  VerifyFileRequestObjectBuilder({
    String? signature,
    String? input,
    String? publicKey,
  })  : _signature = signature,
        _input = input,
        _publicKey = publicKey;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? signatureOffset =
        _signature == null ? null : fbBuilder.writeString(_signature!);
    final int? inputOffset =
        _input == null ? null : fbBuilder.writeString(_input!);
    final int? publicKeyOffset =
        _publicKey == null ? null : fbBuilder.writeString(_publicKey!);
    fbBuilder.startTable(3);
    fbBuilder.addOffset(0, signatureOffset);
    fbBuilder.addOffset(1, inputOffset);
    fbBuilder.addOffset(2, publicKeyOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}

class VerifyBytesRequest {
  VerifyBytesRequest._(this._bc, this._bcOffset);
  factory VerifyBytesRequest(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<VerifyBytesRequest> reader =
      _VerifyBytesRequestReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  String? get signature =>
      const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  List<int>? get message =>
      const fb.Uint8ListReader().vTableGetNullable(_bc, _bcOffset, 6);
  String? get publicKey =>
      const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 8);

  @override
  String toString() {
    return 'VerifyBytesRequest{signature: ${signature}, message: ${message}, publicKey: ${publicKey}}';
  }
}

class _VerifyBytesRequestReader extends fb.TableReader<VerifyBytesRequest> {
  const _VerifyBytesRequestReader();

  @override
  VerifyBytesRequest createObject(fb.BufferContext bc, int offset) =>
      VerifyBytesRequest._(bc, offset);
}

class VerifyBytesRequestBuilder {
  VerifyBytesRequestBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(3);
  }

  int addSignatureOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }

  int addMessageOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }

  int addPublicKeyOffset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class VerifyBytesRequestObjectBuilder extends fb.ObjectBuilder {
  final String? _signature;
  final List<int>? _message;
  final String? _publicKey;

  VerifyBytesRequestObjectBuilder({
    String? signature,
    List<int>? message,
    String? publicKey,
  })  : _signature = signature,
        _message = message,
        _publicKey = publicKey;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? signatureOffset =
        _signature == null ? null : fbBuilder.writeString(_signature!);
    final int? messageOffset =
        _message == null ? null : fbBuilder.writeListUint8(_message!);
    final int? publicKeyOffset =
        _publicKey == null ? null : fbBuilder.writeString(_publicKey!);
    fbBuilder.startTable(3);
    fbBuilder.addOffset(0, signatureOffset);
    fbBuilder.addOffset(1, messageOffset);
    fbBuilder.addOffset(2, publicKeyOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}

class VerifyDataRequest {
  VerifyDataRequest._(this._bc, this._bcOffset);
  factory VerifyDataRequest(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<VerifyDataRequest> reader = _VerifyDataRequestReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  String? get signature =>
      const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  String? get publicKey =>
      const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 6);

  @override
  String toString() {
    return 'VerifyDataRequest{signature: ${signature}, publicKey: ${publicKey}}';
  }
}

class _VerifyDataRequestReader extends fb.TableReader<VerifyDataRequest> {
  const _VerifyDataRequestReader();

  @override
  VerifyDataRequest createObject(fb.BufferContext bc, int offset) =>
      VerifyDataRequest._(bc, offset);
}

class VerifyDataRequestBuilder {
  VerifyDataRequestBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(2);
  }

  int addSignatureOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }

  int addPublicKeyOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class VerifyDataRequestObjectBuilder extends fb.ObjectBuilder {
  final String? _signature;
  final String? _publicKey;

  VerifyDataRequestObjectBuilder({
    String? signature,
    String? publicKey,
  })  : _signature = signature,
        _publicKey = publicKey;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? signatureOffset =
        _signature == null ? null : fbBuilder.writeString(_signature!);
    final int? publicKeyOffset =
        _publicKey == null ? null : fbBuilder.writeString(_publicKey!);
    fbBuilder.startTable(2);
    fbBuilder.addOffset(0, signatureOffset);
    fbBuilder.addOffset(1, publicKeyOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}

class VerifyDataBytesRequest {
  VerifyDataBytesRequest._(this._bc, this._bcOffset);
  factory VerifyDataBytesRequest(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<VerifyDataBytesRequest> reader =
      _VerifyDataBytesRequestReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  List<int>? get signature =>
      const fb.Uint8ListReader().vTableGetNullable(_bc, _bcOffset, 4);
  String? get publicKey =>
      const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 6);

  @override
  String toString() {
    return 'VerifyDataBytesRequest{signature: ${signature}, publicKey: ${publicKey}}';
  }
}

class _VerifyDataBytesRequestReader
    extends fb.TableReader<VerifyDataBytesRequest> {
  const _VerifyDataBytesRequestReader();

  @override
  VerifyDataBytesRequest createObject(fb.BufferContext bc, int offset) =>
      VerifyDataBytesRequest._(bc, offset);
}

class VerifyDataBytesRequestBuilder {
  VerifyDataBytesRequestBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(2);
  }

  int addSignatureOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }

  int addPublicKeyOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class VerifyDataBytesRequestObjectBuilder extends fb.ObjectBuilder {
  final List<int>? _signature;
  final String? _publicKey;

  VerifyDataBytesRequestObjectBuilder({
    List<int>? signature,
    String? publicKey,
  })  : _signature = signature,
        _publicKey = publicKey;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? signatureOffset =
        _signature == null ? null : fbBuilder.writeListUint8(_signature!);
    final int? publicKeyOffset =
        _publicKey == null ? null : fbBuilder.writeString(_publicKey!);
    fbBuilder.startTable(2);
    fbBuilder.addOffset(0, signatureOffset);
    fbBuilder.addOffset(1, publicKeyOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}

class EncryptSymmetricRequest {
  EncryptSymmetricRequest._(this._bc, this._bcOffset);
  factory EncryptSymmetricRequest(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<EncryptSymmetricRequest> reader =
      _EncryptSymmetricRequestReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  String? get message =>
      const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  String? get passphrase =>
      const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 6);
  KeyOptions? get options =>
      KeyOptions.reader.vTableGetNullable(_bc, _bcOffset, 8);
  FileHints? get fileHints =>
      FileHints.reader.vTableGetNullable(_bc, _bcOffset, 10);

  @override
  String toString() {
    return 'EncryptSymmetricRequest{message: ${message}, passphrase: ${passphrase}, options: ${options}, fileHints: ${fileHints}}';
  }
}

class _EncryptSymmetricRequestReader
    extends fb.TableReader<EncryptSymmetricRequest> {
  const _EncryptSymmetricRequestReader();

  @override
  EncryptSymmetricRequest createObject(fb.BufferContext bc, int offset) =>
      EncryptSymmetricRequest._(bc, offset);
}

class EncryptSymmetricRequestBuilder {
  EncryptSymmetricRequestBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(4);
  }

  int addMessageOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }

  int addPassphraseOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }

  int addOptionsOffset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }

  int addFileHintsOffset(int? offset) {
    fbBuilder.addOffset(3, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class EncryptSymmetricRequestObjectBuilder extends fb.ObjectBuilder {
  final String? _message;
  final String? _passphrase;
  final KeyOptionsObjectBuilder? _options;
  final FileHintsObjectBuilder? _fileHints;

  EncryptSymmetricRequestObjectBuilder({
    String? message,
    String? passphrase,
    KeyOptionsObjectBuilder? options,
    FileHintsObjectBuilder? fileHints,
  })  : _message = message,
        _passphrase = passphrase,
        _options = options,
        _fileHints = fileHints;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? messageOffset =
        _message == null ? null : fbBuilder.writeString(_message!);
    final int? passphraseOffset =
        _passphrase == null ? null : fbBuilder.writeString(_passphrase!);
    final int? optionsOffset = _options?.getOrCreateOffset(fbBuilder);
    final int? fileHintsOffset = _fileHints?.getOrCreateOffset(fbBuilder);
    fbBuilder.startTable(4);
    fbBuilder.addOffset(0, messageOffset);
    fbBuilder.addOffset(1, passphraseOffset);
    fbBuilder.addOffset(2, optionsOffset);
    fbBuilder.addOffset(3, fileHintsOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}

class EncryptSymmetricFileRequest {
  EncryptSymmetricFileRequest._(this._bc, this._bcOffset);
  factory EncryptSymmetricFileRequest(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<EncryptSymmetricFileRequest> reader =
      _EncryptSymmetricFileRequestReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  String? get input =>
      const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  String? get output =>
      const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 6);
  String? get passphrase =>
      const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 8);
  KeyOptions? get options =>
      KeyOptions.reader.vTableGetNullable(_bc, _bcOffset, 10);
  FileHints? get fileHints =>
      FileHints.reader.vTableGetNullable(_bc, _bcOffset, 12);

  @override
  String toString() {
    return 'EncryptSymmetricFileRequest{input: ${input}, output: ${output}, passphrase: ${passphrase}, options: ${options}, fileHints: ${fileHints}}';
  }
}

class _EncryptSymmetricFileRequestReader
    extends fb.TableReader<EncryptSymmetricFileRequest> {
  const _EncryptSymmetricFileRequestReader();

  @override
  EncryptSymmetricFileRequest createObject(fb.BufferContext bc, int offset) =>
      EncryptSymmetricFileRequest._(bc, offset);
}

class EncryptSymmetricFileRequestBuilder {
  EncryptSymmetricFileRequestBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(5);
  }

  int addInputOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }

  int addOutputOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }

  int addPassphraseOffset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }

  int addOptionsOffset(int? offset) {
    fbBuilder.addOffset(3, offset);
    return fbBuilder.offset;
  }

  int addFileHintsOffset(int? offset) {
    fbBuilder.addOffset(4, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class EncryptSymmetricFileRequestObjectBuilder extends fb.ObjectBuilder {
  final String? _input;
  final String? _output;
  final String? _passphrase;
  final KeyOptionsObjectBuilder? _options;
  final FileHintsObjectBuilder? _fileHints;

  EncryptSymmetricFileRequestObjectBuilder({
    String? input,
    String? output,
    String? passphrase,
    KeyOptionsObjectBuilder? options,
    FileHintsObjectBuilder? fileHints,
  })  : _input = input,
        _output = output,
        _passphrase = passphrase,
        _options = options,
        _fileHints = fileHints;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? inputOffset =
        _input == null ? null : fbBuilder.writeString(_input!);
    final int? outputOffset =
        _output == null ? null : fbBuilder.writeString(_output!);
    final int? passphraseOffset =
        _passphrase == null ? null : fbBuilder.writeString(_passphrase!);
    final int? optionsOffset = _options?.getOrCreateOffset(fbBuilder);
    final int? fileHintsOffset = _fileHints?.getOrCreateOffset(fbBuilder);
    fbBuilder.startTable(5);
    fbBuilder.addOffset(0, inputOffset);
    fbBuilder.addOffset(1, outputOffset);
    fbBuilder.addOffset(2, passphraseOffset);
    fbBuilder.addOffset(3, optionsOffset);
    fbBuilder.addOffset(4, fileHintsOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}

class EncryptSymmetricBytesRequest {
  EncryptSymmetricBytesRequest._(this._bc, this._bcOffset);
  factory EncryptSymmetricBytesRequest(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<EncryptSymmetricBytesRequest> reader =
      _EncryptSymmetricBytesRequestReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  List<int>? get message =>
      const fb.Uint8ListReader().vTableGetNullable(_bc, _bcOffset, 4);
  String? get passphrase =>
      const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 6);
  KeyOptions? get options =>
      KeyOptions.reader.vTableGetNullable(_bc, _bcOffset, 8);
  FileHints? get fileHints =>
      FileHints.reader.vTableGetNullable(_bc, _bcOffset, 10);

  @override
  String toString() {
    return 'EncryptSymmetricBytesRequest{message: ${message}, passphrase: ${passphrase}, options: ${options}, fileHints: ${fileHints}}';
  }
}

class _EncryptSymmetricBytesRequestReader
    extends fb.TableReader<EncryptSymmetricBytesRequest> {
  const _EncryptSymmetricBytesRequestReader();

  @override
  EncryptSymmetricBytesRequest createObject(fb.BufferContext bc, int offset) =>
      EncryptSymmetricBytesRequest._(bc, offset);
}

class EncryptSymmetricBytesRequestBuilder {
  EncryptSymmetricBytesRequestBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(4);
  }

  int addMessageOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }

  int addPassphraseOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }

  int addOptionsOffset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }

  int addFileHintsOffset(int? offset) {
    fbBuilder.addOffset(3, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class EncryptSymmetricBytesRequestObjectBuilder extends fb.ObjectBuilder {
  final List<int>? _message;
  final String? _passphrase;
  final KeyOptionsObjectBuilder? _options;
  final FileHintsObjectBuilder? _fileHints;

  EncryptSymmetricBytesRequestObjectBuilder({
    List<int>? message,
    String? passphrase,
    KeyOptionsObjectBuilder? options,
    FileHintsObjectBuilder? fileHints,
  })  : _message = message,
        _passphrase = passphrase,
        _options = options,
        _fileHints = fileHints;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? messageOffset =
        _message == null ? null : fbBuilder.writeListUint8(_message!);
    final int? passphraseOffset =
        _passphrase == null ? null : fbBuilder.writeString(_passphrase!);
    final int? optionsOffset = _options?.getOrCreateOffset(fbBuilder);
    final int? fileHintsOffset = _fileHints?.getOrCreateOffset(fbBuilder);
    fbBuilder.startTable(4);
    fbBuilder.addOffset(0, messageOffset);
    fbBuilder.addOffset(1, passphraseOffset);
    fbBuilder.addOffset(2, optionsOffset);
    fbBuilder.addOffset(3, fileHintsOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}

class DecryptSymmetricRequest {
  DecryptSymmetricRequest._(this._bc, this._bcOffset);
  factory DecryptSymmetricRequest(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<DecryptSymmetricRequest> reader =
      _DecryptSymmetricRequestReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  String? get message =>
      const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  String? get passphrase =>
      const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 6);
  KeyOptions? get options =>
      KeyOptions.reader.vTableGetNullable(_bc, _bcOffset, 8);

  @override
  String toString() {
    return 'DecryptSymmetricRequest{message: ${message}, passphrase: ${passphrase}, options: ${options}}';
  }
}

class _DecryptSymmetricRequestReader
    extends fb.TableReader<DecryptSymmetricRequest> {
  const _DecryptSymmetricRequestReader();

  @override
  DecryptSymmetricRequest createObject(fb.BufferContext bc, int offset) =>
      DecryptSymmetricRequest._(bc, offset);
}

class DecryptSymmetricRequestBuilder {
  DecryptSymmetricRequestBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(3);
  }

  int addMessageOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }

  int addPassphraseOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }

  int addOptionsOffset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class DecryptSymmetricRequestObjectBuilder extends fb.ObjectBuilder {
  final String? _message;
  final String? _passphrase;
  final KeyOptionsObjectBuilder? _options;

  DecryptSymmetricRequestObjectBuilder({
    String? message,
    String? passphrase,
    KeyOptionsObjectBuilder? options,
  })  : _message = message,
        _passphrase = passphrase,
        _options = options;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? messageOffset =
        _message == null ? null : fbBuilder.writeString(_message!);
    final int? passphraseOffset =
        _passphrase == null ? null : fbBuilder.writeString(_passphrase!);
    final int? optionsOffset = _options?.getOrCreateOffset(fbBuilder);
    fbBuilder.startTable(3);
    fbBuilder.addOffset(0, messageOffset);
    fbBuilder.addOffset(1, passphraseOffset);
    fbBuilder.addOffset(2, optionsOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}

class DecryptSymmetricFileRequest {
  DecryptSymmetricFileRequest._(this._bc, this._bcOffset);
  factory DecryptSymmetricFileRequest(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<DecryptSymmetricFileRequest> reader =
      _DecryptSymmetricFileRequestReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  String? get input =>
      const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  String? get output =>
      const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 6);
  String? get passphrase =>
      const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 8);
  KeyOptions? get options =>
      KeyOptions.reader.vTableGetNullable(_bc, _bcOffset, 10);

  @override
  String toString() {
    return 'DecryptSymmetricFileRequest{input: ${input}, output: ${output}, passphrase: ${passphrase}, options: ${options}}';
  }
}

class _DecryptSymmetricFileRequestReader
    extends fb.TableReader<DecryptSymmetricFileRequest> {
  const _DecryptSymmetricFileRequestReader();

  @override
  DecryptSymmetricFileRequest createObject(fb.BufferContext bc, int offset) =>
      DecryptSymmetricFileRequest._(bc, offset);
}

class DecryptSymmetricFileRequestBuilder {
  DecryptSymmetricFileRequestBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(4);
  }

  int addInputOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }

  int addOutputOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }

  int addPassphraseOffset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }

  int addOptionsOffset(int? offset) {
    fbBuilder.addOffset(3, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class DecryptSymmetricFileRequestObjectBuilder extends fb.ObjectBuilder {
  final String? _input;
  final String? _output;
  final String? _passphrase;
  final KeyOptionsObjectBuilder? _options;

  DecryptSymmetricFileRequestObjectBuilder({
    String? input,
    String? output,
    String? passphrase,
    KeyOptionsObjectBuilder? options,
  })  : _input = input,
        _output = output,
        _passphrase = passphrase,
        _options = options;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? inputOffset =
        _input == null ? null : fbBuilder.writeString(_input!);
    final int? outputOffset =
        _output == null ? null : fbBuilder.writeString(_output!);
    final int? passphraseOffset =
        _passphrase == null ? null : fbBuilder.writeString(_passphrase!);
    final int? optionsOffset = _options?.getOrCreateOffset(fbBuilder);
    fbBuilder.startTable(4);
    fbBuilder.addOffset(0, inputOffset);
    fbBuilder.addOffset(1, outputOffset);
    fbBuilder.addOffset(2, passphraseOffset);
    fbBuilder.addOffset(3, optionsOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}

class DecryptSymmetricBytesRequest {
  DecryptSymmetricBytesRequest._(this._bc, this._bcOffset);
  factory DecryptSymmetricBytesRequest(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<DecryptSymmetricBytesRequest> reader =
      _DecryptSymmetricBytesRequestReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  List<int>? get message =>
      const fb.Uint8ListReader().vTableGetNullable(_bc, _bcOffset, 4);
  String? get passphrase =>
      const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 6);
  KeyOptions? get options =>
      KeyOptions.reader.vTableGetNullable(_bc, _bcOffset, 8);

  @override
  String toString() {
    return 'DecryptSymmetricBytesRequest{message: ${message}, passphrase: ${passphrase}, options: ${options}}';
  }
}

class _DecryptSymmetricBytesRequestReader
    extends fb.TableReader<DecryptSymmetricBytesRequest> {
  const _DecryptSymmetricBytesRequestReader();

  @override
  DecryptSymmetricBytesRequest createObject(fb.BufferContext bc, int offset) =>
      DecryptSymmetricBytesRequest._(bc, offset);
}

class DecryptSymmetricBytesRequestBuilder {
  DecryptSymmetricBytesRequestBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(3);
  }

  int addMessageOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }

  int addPassphraseOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }

  int addOptionsOffset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class DecryptSymmetricBytesRequestObjectBuilder extends fb.ObjectBuilder {
  final List<int>? _message;
  final String? _passphrase;
  final KeyOptionsObjectBuilder? _options;

  DecryptSymmetricBytesRequestObjectBuilder({
    List<int>? message,
    String? passphrase,
    KeyOptionsObjectBuilder? options,
  })  : _message = message,
        _passphrase = passphrase,
        _options = options;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? messageOffset =
        _message == null ? null : fbBuilder.writeListUint8(_message!);
    final int? passphraseOffset =
        _passphrase == null ? null : fbBuilder.writeString(_passphrase!);
    final int? optionsOffset = _options?.getOrCreateOffset(fbBuilder);
    fbBuilder.startTable(3);
    fbBuilder.addOffset(0, messageOffset);
    fbBuilder.addOffset(1, passphraseOffset);
    fbBuilder.addOffset(2, optionsOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}

class GenerateRequest {
  GenerateRequest._(this._bc, this._bcOffset);
  factory GenerateRequest(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<GenerateRequest> reader = _GenerateRequestReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  Options? get options => Options.reader.vTableGetNullable(_bc, _bcOffset, 4);

  @override
  String toString() {
    return 'GenerateRequest{options: ${options}}';
  }
}

class _GenerateRequestReader extends fb.TableReader<GenerateRequest> {
  const _GenerateRequestReader();

  @override
  GenerateRequest createObject(fb.BufferContext bc, int offset) =>
      GenerateRequest._(bc, offset);
}

class GenerateRequestBuilder {
  GenerateRequestBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(1);
  }

  int addOptionsOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class GenerateRequestObjectBuilder extends fb.ObjectBuilder {
  final OptionsObjectBuilder? _options;

  GenerateRequestObjectBuilder({
    OptionsObjectBuilder? options,
  }) : _options = options;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? optionsOffset = _options?.getOrCreateOffset(fbBuilder);
    fbBuilder.startTable(1);
    fbBuilder.addOffset(0, optionsOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}

class ArmorEncodeRequest {
  ArmorEncodeRequest._(this._bc, this._bcOffset);
  factory ArmorEncodeRequest(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<ArmorEncodeRequest> reader =
      _ArmorEncodeRequestReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  List<int>? get packet =>
      const fb.Uint8ListReader().vTableGetNullable(_bc, _bcOffset, 4);
  String? get type =>
      const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 6);

  @override
  String toString() {
    return 'ArmorEncodeRequest{packet: ${packet}, type: ${type}}';
  }
}

class _ArmorEncodeRequestReader extends fb.TableReader<ArmorEncodeRequest> {
  const _ArmorEncodeRequestReader();

  @override
  ArmorEncodeRequest createObject(fb.BufferContext bc, int offset) =>
      ArmorEncodeRequest._(bc, offset);
}

class ArmorEncodeRequestBuilder {
  ArmorEncodeRequestBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(2);
  }

  int addPacketOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }

  int addTypeOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class ArmorEncodeRequestObjectBuilder extends fb.ObjectBuilder {
  final List<int>? _packet;
  final String? _type;

  ArmorEncodeRequestObjectBuilder({
    List<int>? packet,
    String? type,
  })  : _packet = packet,
        _type = type;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? packetOffset =
        _packet == null ? null : fbBuilder.writeListUint8(_packet!);
    final int? typeOffset =
        _type == null ? null : fbBuilder.writeString(_type!);
    fbBuilder.startTable(2);
    fbBuilder.addOffset(0, packetOffset);
    fbBuilder.addOffset(1, typeOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}

class ArmorDecodeRequest {
  ArmorDecodeRequest._(this._bc, this._bcOffset);
  factory ArmorDecodeRequest(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<ArmorDecodeRequest> reader =
      _ArmorDecodeRequestReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  String? get message =>
      const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);

  @override
  String toString() {
    return 'ArmorDecodeRequest{message: ${message}}';
  }
}

class _ArmorDecodeRequestReader extends fb.TableReader<ArmorDecodeRequest> {
  const _ArmorDecodeRequestReader();

  @override
  ArmorDecodeRequest createObject(fb.BufferContext bc, int offset) =>
      ArmorDecodeRequest._(bc, offset);
}

class ArmorDecodeRequestBuilder {
  ArmorDecodeRequestBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(1);
  }

  int addMessageOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class ArmorDecodeRequestObjectBuilder extends fb.ObjectBuilder {
  final String? _message;

  ArmorDecodeRequestObjectBuilder({
    String? message,
  }) : _message = message;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? messageOffset =
        _message == null ? null : fbBuilder.writeString(_message!);
    fbBuilder.startTable(1);
    fbBuilder.addOffset(0, messageOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}

class GetPublicKeyMetadataRequest {
  GetPublicKeyMetadataRequest._(this._bc, this._bcOffset);
  factory GetPublicKeyMetadataRequest(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<GetPublicKeyMetadataRequest> reader =
      _GetPublicKeyMetadataRequestReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  String? get publicKey =>
      const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);

  @override
  String toString() {
    return 'GetPublicKeyMetadataRequest{publicKey: ${publicKey}}';
  }
}

class _GetPublicKeyMetadataRequestReader
    extends fb.TableReader<GetPublicKeyMetadataRequest> {
  const _GetPublicKeyMetadataRequestReader();

  @override
  GetPublicKeyMetadataRequest createObject(fb.BufferContext bc, int offset) =>
      GetPublicKeyMetadataRequest._(bc, offset);
}

class GetPublicKeyMetadataRequestBuilder {
  GetPublicKeyMetadataRequestBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(1);
  }

  int addPublicKeyOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class GetPublicKeyMetadataRequestObjectBuilder extends fb.ObjectBuilder {
  final String? _publicKey;

  GetPublicKeyMetadataRequestObjectBuilder({
    String? publicKey,
  }) : _publicKey = publicKey;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? publicKeyOffset =
        _publicKey == null ? null : fbBuilder.writeString(_publicKey!);
    fbBuilder.startTable(1);
    fbBuilder.addOffset(0, publicKeyOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}

class GetPrivateKeyMetadataRequest {
  GetPrivateKeyMetadataRequest._(this._bc, this._bcOffset);
  factory GetPrivateKeyMetadataRequest(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<GetPrivateKeyMetadataRequest> reader =
      _GetPrivateKeyMetadataRequestReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  String? get privateKey =>
      const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);

  @override
  String toString() {
    return 'GetPrivateKeyMetadataRequest{privateKey: ${privateKey}}';
  }
}

class _GetPrivateKeyMetadataRequestReader
    extends fb.TableReader<GetPrivateKeyMetadataRequest> {
  const _GetPrivateKeyMetadataRequestReader();

  @override
  GetPrivateKeyMetadataRequest createObject(fb.BufferContext bc, int offset) =>
      GetPrivateKeyMetadataRequest._(bc, offset);
}

class GetPrivateKeyMetadataRequestBuilder {
  GetPrivateKeyMetadataRequestBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(1);
  }

  int addPrivateKeyOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class GetPrivateKeyMetadataRequestObjectBuilder extends fb.ObjectBuilder {
  final String? _privateKey;

  GetPrivateKeyMetadataRequestObjectBuilder({
    String? privateKey,
  }) : _privateKey = privateKey;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? privateKeyOffset =
        _privateKey == null ? null : fbBuilder.writeString(_privateKey!);
    fbBuilder.startTable(1);
    fbBuilder.addOffset(0, privateKeyOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}

class ConvertPrivateKeyToPublicKeyRequest {
  ConvertPrivateKeyToPublicKeyRequest._(this._bc, this._bcOffset);
  factory ConvertPrivateKeyToPublicKeyRequest(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<ConvertPrivateKeyToPublicKeyRequest> reader =
      _ConvertPrivateKeyToPublicKeyRequestReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  String? get privateKey =>
      const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);

  @override
  String toString() {
    return 'ConvertPrivateKeyToPublicKeyRequest{privateKey: ${privateKey}}';
  }
}

class _ConvertPrivateKeyToPublicKeyRequestReader
    extends fb.TableReader<ConvertPrivateKeyToPublicKeyRequest> {
  const _ConvertPrivateKeyToPublicKeyRequestReader();

  @override
  ConvertPrivateKeyToPublicKeyRequest createObject(
          fb.BufferContext bc, int offset) =>
      ConvertPrivateKeyToPublicKeyRequest._(bc, offset);
}

class ConvertPrivateKeyToPublicKeyRequestBuilder {
  ConvertPrivateKeyToPublicKeyRequestBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(1);
  }

  int addPrivateKeyOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class ConvertPrivateKeyToPublicKeyRequestObjectBuilder
    extends fb.ObjectBuilder {
  final String? _privateKey;

  ConvertPrivateKeyToPublicKeyRequestObjectBuilder({
    String? privateKey,
  }) : _privateKey = privateKey;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? privateKeyOffset =
        _privateKey == null ? null : fbBuilder.writeString(_privateKey!);
    fbBuilder.startTable(1);
    fbBuilder.addOffset(0, privateKeyOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}

///  KeyOptions collects a number of parameters along with sensible defaults.
class KeyOptions {
  KeyOptions._(this._bc, this._bcOffset);
  factory KeyOptions(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<KeyOptions> reader = _KeyOptionsReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  ///  The public key algorithm to use - will always create a signing primary
  ///  key and encryption subkey.
  Algorithm get algorithm => Algorithm.fromValue(
      const fb.Int32Reader().vTableGet(_bc, _bcOffset, 4, 0));

  ///  Curve configures the desired packet.Curve if the Algorithm is PubKeyAlgoECDSA,
  ///  PubKeyAlgoEdDSA, or PubKeyAlgoECDH. If empty Curve25519 is used.
  Curve get curve =>
      Curve.fromValue(const fb.Int32Reader().vTableGet(_bc, _bcOffset, 6, 0));

  ///  Hash is the default hash function to be used.
  ///  If zero, SHA-256 is used.
  Hash get hash =>
      Hash.fromValue(const fb.Int32Reader().vTableGet(_bc, _bcOffset, 8, 0));

  ///  Cipher is the cipher to be used.
  ///  If zero, AES-128 is used.
  Cipher get cipher =>
      Cipher.fromValue(const fb.Int32Reader().vTableGet(_bc, _bcOffset, 10, 0));

  ///  Compression is the compression algorithm to be
  ///  applied to the plaintext before encryption. If zero, no
  ///  compression is done.
  Compression get compression => Compression.fromValue(
      const fb.Int32Reader().vTableGet(_bc, _bcOffset, 12, 0));

  ///  CompressionLevel is the compression level to use. It must be set to
  ///  between -1 and 9, with -1 causing the compressor to use the
  ///  default compression level, 0 causing the compressor to use
  ///  no compression and 1 to 9 representing increasing (better,
  ///  slower) compression levels. If Level is less than -1 or
  ///  more then 9, a non-nil error will be returned during
  ///  encryption. See the constants above for convenient common
  ///  settings for Level.
  int get compressionLevel =>
      const fb.Int32Reader().vTableGet(_bc, _bcOffset, 14, 0);

  ///  RSABits is the number of bits in new RSA keys made with NewEntity.
  ///  If zero, then 2048 bit keys are created.
  int get rsaBits => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 16, 0);

  @override
  String toString() {
    return 'KeyOptions{algorithm: ${algorithm}, curve: ${curve}, hash: ${hash}, cipher: ${cipher}, compression: ${compression}, compressionLevel: ${compressionLevel}, rsaBits: ${rsaBits}}';
  }
}

class _KeyOptionsReader extends fb.TableReader<KeyOptions> {
  const _KeyOptionsReader();

  @override
  KeyOptions createObject(fb.BufferContext bc, int offset) =>
      KeyOptions._(bc, offset);
}

class KeyOptionsBuilder {
  KeyOptionsBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(7);
  }

  int addAlgorithm(Algorithm? algorithm) {
    fbBuilder.addInt32(0, algorithm?.value);
    return fbBuilder.offset;
  }

  int addCurve(Curve? curve) {
    fbBuilder.addInt32(1, curve?.value);
    return fbBuilder.offset;
  }

  int addHash(Hash? hash) {
    fbBuilder.addInt32(2, hash?.value);
    return fbBuilder.offset;
  }

  int addCipher(Cipher? cipher) {
    fbBuilder.addInt32(3, cipher?.value);
    return fbBuilder.offset;
  }

  int addCompression(Compression? compression) {
    fbBuilder.addInt32(4, compression?.value);
    return fbBuilder.offset;
  }

  int addCompressionLevel(int? compressionLevel) {
    fbBuilder.addInt32(5, compressionLevel);
    return fbBuilder.offset;
  }

  int addRsaBits(int? rsaBits) {
    fbBuilder.addInt32(6, rsaBits);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class KeyOptionsObjectBuilder extends fb.ObjectBuilder {
  final Algorithm? _algorithm;
  final Curve? _curve;
  final Hash? _hash;
  final Cipher? _cipher;
  final Compression? _compression;
  final int? _compressionLevel;
  final int? _rsaBits;

  KeyOptionsObjectBuilder({
    Algorithm? algorithm,
    Curve? curve,
    Hash? hash,
    Cipher? cipher,
    Compression? compression,
    int? compressionLevel,
    int? rsaBits,
  })  : _algorithm = algorithm,
        _curve = curve,
        _hash = hash,
        _cipher = cipher,
        _compression = compression,
        _compressionLevel = compressionLevel,
        _rsaBits = rsaBits;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    fbBuilder.startTable(7);
    fbBuilder.addInt32(0, _algorithm?.value);
    fbBuilder.addInt32(1, _curve?.value);
    fbBuilder.addInt32(2, _hash?.value);
    fbBuilder.addInt32(3, _cipher?.value);
    fbBuilder.addInt32(4, _compression?.value);
    fbBuilder.addInt32(5, _compressionLevel);
    fbBuilder.addInt32(6, _rsaBits);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}

class Options {
  Options._(this._bc, this._bcOffset);
  factory Options(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<Options> reader = _OptionsReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  String? get name =>
      const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  String? get comment =>
      const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 6);
  String? get email =>
      const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 8);
  String? get passphrase =>
      const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 10);
  KeyOptions? get keyOptions =>
      KeyOptions.reader.vTableGetNullable(_bc, _bcOffset, 12);

  @override
  String toString() {
    return 'Options{name: ${name}, comment: ${comment}, email: ${email}, passphrase: ${passphrase}, keyOptions: ${keyOptions}}';
  }
}

class _OptionsReader extends fb.TableReader<Options> {
  const _OptionsReader();

  @override
  Options createObject(fb.BufferContext bc, int offset) =>
      Options._(bc, offset);
}

class OptionsBuilder {
  OptionsBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(5);
  }

  int addNameOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }

  int addCommentOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }

  int addEmailOffset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }

  int addPassphraseOffset(int? offset) {
    fbBuilder.addOffset(3, offset);
    return fbBuilder.offset;
  }

  int addKeyOptionsOffset(int? offset) {
    fbBuilder.addOffset(4, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class OptionsObjectBuilder extends fb.ObjectBuilder {
  final String? _name;
  final String? _comment;
  final String? _email;
  final String? _passphrase;
  final KeyOptionsObjectBuilder? _keyOptions;

  OptionsObjectBuilder({
    String? name,
    String? comment,
    String? email,
    String? passphrase,
    KeyOptionsObjectBuilder? keyOptions,
  })  : _name = name,
        _comment = comment,
        _email = email,
        _passphrase = passphrase,
        _keyOptions = keyOptions;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? nameOffset =
        _name == null ? null : fbBuilder.writeString(_name!);
    final int? commentOffset =
        _comment == null ? null : fbBuilder.writeString(_comment!);
    final int? emailOffset =
        _email == null ? null : fbBuilder.writeString(_email!);
    final int? passphraseOffset =
        _passphrase == null ? null : fbBuilder.writeString(_passphrase!);
    final int? keyOptionsOffset = _keyOptions?.getOrCreateOffset(fbBuilder);
    fbBuilder.startTable(5);
    fbBuilder.addOffset(0, nameOffset);
    fbBuilder.addOffset(1, commentOffset);
    fbBuilder.addOffset(2, emailOffset);
    fbBuilder.addOffset(3, passphraseOffset);
    fbBuilder.addOffset(4, keyOptionsOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}

class FileHints {
  FileHints._(this._bc, this._bcOffset);
  factory FileHints(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<FileHints> reader = _FileHintsReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  ///  IsBinary can be set to hint that the contents are binary data.
  bool get isBinary =>
      const fb.BoolReader().vTableGet(_bc, _bcOffset, 4, false);

  ///  FileName hints at the name of the file that should be written. It's
  ///  truncated to 255 bytes if longer. It may be empty to suggest that the
  ///  file should not be written to disk. It may be equal to "_CONSOLE" to
  ///  suggest the data should not be written to disk.
  String? get fileName =>
      const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 6);

  ///  ModTime format allowed: RFC3339, contains the modification time of the file, or the zero time if not applicable.
  String? get modTime =>
      const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 8);

  @override
  String toString() {
    return 'FileHints{isBinary: ${isBinary}, fileName: ${fileName}, modTime: ${modTime}}';
  }
}

class _FileHintsReader extends fb.TableReader<FileHints> {
  const _FileHintsReader();

  @override
  FileHints createObject(fb.BufferContext bc, int offset) =>
      FileHints._(bc, offset);
}

class FileHintsBuilder {
  FileHintsBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(3);
  }

  int addIsBinary(bool? isBinary) {
    fbBuilder.addBool(0, isBinary);
    return fbBuilder.offset;
  }

  int addFileNameOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }

  int addModTimeOffset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class FileHintsObjectBuilder extends fb.ObjectBuilder {
  final bool? _isBinary;
  final String? _fileName;
  final String? _modTime;

  FileHintsObjectBuilder({
    bool? isBinary,
    String? fileName,
    String? modTime,
  })  : _isBinary = isBinary,
        _fileName = fileName,
        _modTime = modTime;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? fileNameOffset =
        _fileName == null ? null : fbBuilder.writeString(_fileName!);
    final int? modTimeOffset =
        _modTime == null ? null : fbBuilder.writeString(_modTime!);
    fbBuilder.startTable(3);
    fbBuilder.addBool(0, _isBinary);
    fbBuilder.addOffset(1, fileNameOffset);
    fbBuilder.addOffset(2, modTimeOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}

///  An Entity represents the components of an OpenPGP key: a primary public key
///  (which must be a signing key), one or more identities claimed by that key,
///  and zero or more subkeys, which may be encryption keys.
class Entity {
  Entity._(this._bc, this._bcOffset);
  factory Entity(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<Entity> reader = _EntityReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  String? get publicKey =>
      const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  String? get privateKey =>
      const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 6);
  String? get passphrase =>
      const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 8);

  @override
  String toString() {
    return 'Entity{publicKey: ${publicKey}, privateKey: ${privateKey}, passphrase: ${passphrase}}';
  }
}

class _EntityReader extends fb.TableReader<Entity> {
  const _EntityReader();

  @override
  Entity createObject(fb.BufferContext bc, int offset) => Entity._(bc, offset);
}

class EntityBuilder {
  EntityBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(3);
  }

  int addPublicKeyOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }

  int addPrivateKeyOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }

  int addPassphraseOffset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class EntityObjectBuilder extends fb.ObjectBuilder {
  final String? _publicKey;
  final String? _privateKey;
  final String? _passphrase;

  EntityObjectBuilder({
    String? publicKey,
    String? privateKey,
    String? passphrase,
  })  : _publicKey = publicKey,
        _privateKey = privateKey,
        _passphrase = passphrase;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? publicKeyOffset =
        _publicKey == null ? null : fbBuilder.writeString(_publicKey!);
    final int? privateKeyOffset =
        _privateKey == null ? null : fbBuilder.writeString(_privateKey!);
    final int? passphraseOffset =
        _passphrase == null ? null : fbBuilder.writeString(_passphrase!);
    fbBuilder.startTable(3);
    fbBuilder.addOffset(0, publicKeyOffset);
    fbBuilder.addOffset(1, privateKeyOffset);
    fbBuilder.addOffset(2, passphraseOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}

class StringResponse {
  StringResponse._(this._bc, this._bcOffset);
  factory StringResponse(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<StringResponse> reader = _StringResponseReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  String? get output =>
      const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  String? get error =>
      const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 6);

  @override
  String toString() {
    return 'StringResponse{output: ${output}, error: ${error}}';
  }
}

class _StringResponseReader extends fb.TableReader<StringResponse> {
  const _StringResponseReader();

  @override
  StringResponse createObject(fb.BufferContext bc, int offset) =>
      StringResponse._(bc, offset);
}

class StringResponseBuilder {
  StringResponseBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(2);
  }

  int addOutputOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }

  int addErrorOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class StringResponseObjectBuilder extends fb.ObjectBuilder {
  final String? _output;
  final String? _error;

  StringResponseObjectBuilder({
    String? output,
    String? error,
  })  : _output = output,
        _error = error;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? outputOffset =
        _output == null ? null : fbBuilder.writeString(_output!);
    final int? errorOffset =
        _error == null ? null : fbBuilder.writeString(_error!);
    fbBuilder.startTable(2);
    fbBuilder.addOffset(0, outputOffset);
    fbBuilder.addOffset(1, errorOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}

class BytesResponse {
  BytesResponse._(this._bc, this._bcOffset);
  factory BytesResponse(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<BytesResponse> reader = _BytesResponseReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  List<int>? get output =>
      const fb.Uint8ListReader().vTableGetNullable(_bc, _bcOffset, 4);
  String? get error =>
      const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 6);

  @override
  String toString() {
    return 'BytesResponse{output: ${output}, error: ${error}}';
  }
}

class _BytesResponseReader extends fb.TableReader<BytesResponse> {
  const _BytesResponseReader();

  @override
  BytesResponse createObject(fb.BufferContext bc, int offset) =>
      BytesResponse._(bc, offset);
}

class BytesResponseBuilder {
  BytesResponseBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(2);
  }

  int addOutputOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }

  int addErrorOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class BytesResponseObjectBuilder extends fb.ObjectBuilder {
  final List<int>? _output;
  final String? _error;

  BytesResponseObjectBuilder({
    List<int>? output,
    String? error,
  })  : _output = output,
        _error = error;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? outputOffset =
        _output == null ? null : fbBuilder.writeListUint8(_output!);
    final int? errorOffset =
        _error == null ? null : fbBuilder.writeString(_error!);
    fbBuilder.startTable(2);
    fbBuilder.addOffset(0, outputOffset);
    fbBuilder.addOffset(1, errorOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}

class BoolResponse {
  BoolResponse._(this._bc, this._bcOffset);
  factory BoolResponse(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<BoolResponse> reader = _BoolResponseReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  bool get output => const fb.BoolReader().vTableGet(_bc, _bcOffset, 4, false);
  String? get error =>
      const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 6);

  @override
  String toString() {
    return 'BoolResponse{output: ${output}, error: ${error}}';
  }
}

class _BoolResponseReader extends fb.TableReader<BoolResponse> {
  const _BoolResponseReader();

  @override
  BoolResponse createObject(fb.BufferContext bc, int offset) =>
      BoolResponse._(bc, offset);
}

class BoolResponseBuilder {
  BoolResponseBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(2);
  }

  int addOutput(bool? output) {
    fbBuilder.addBool(0, output);
    return fbBuilder.offset;
  }

  int addErrorOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class BoolResponseObjectBuilder extends fb.ObjectBuilder {
  final bool? _output;
  final String? _error;

  BoolResponseObjectBuilder({
    bool? output,
    String? error,
  })  : _output = output,
        _error = error;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? errorOffset =
        _error == null ? null : fbBuilder.writeString(_error!);
    fbBuilder.startTable(2);
    fbBuilder.addBool(0, _output);
    fbBuilder.addOffset(1, errorOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}

class IntResponse {
  IntResponse._(this._bc, this._bcOffset);
  factory IntResponse(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<IntResponse> reader = _IntResponseReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  int get output => const fb.Int64Reader().vTableGet(_bc, _bcOffset, 4, 0);
  String? get error =>
      const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 6);

  @override
  String toString() {
    return 'IntResponse{output: ${output}, error: ${error}}';
  }
}

class _IntResponseReader extends fb.TableReader<IntResponse> {
  const _IntResponseReader();

  @override
  IntResponse createObject(fb.BufferContext bc, int offset) =>
      IntResponse._(bc, offset);
}

class IntResponseBuilder {
  IntResponseBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(2);
  }

  int addOutput(int? output) {
    fbBuilder.addInt64(0, output);
    return fbBuilder.offset;
  }

  int addErrorOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class IntResponseObjectBuilder extends fb.ObjectBuilder {
  final int? _output;
  final String? _error;

  IntResponseObjectBuilder({
    int? output,
    String? error,
  })  : _output = output,
        _error = error;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? errorOffset =
        _error == null ? null : fbBuilder.writeString(_error!);
    fbBuilder.startTable(2);
    fbBuilder.addInt64(0, _output);
    fbBuilder.addOffset(1, errorOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}

class ArmorDecodeResponse {
  ArmorDecodeResponse._(this._bc, this._bcOffset);
  factory ArmorDecodeResponse(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<ArmorDecodeResponse> reader =
      _ArmorDecodeResponseReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  ArmorMetadata? get output =>
      ArmorMetadata.reader.vTableGetNullable(_bc, _bcOffset, 4);
  String? get error =>
      const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 6);

  @override
  String toString() {
    return 'ArmorDecodeResponse{output: ${output}, error: ${error}}';
  }
}

class _ArmorDecodeResponseReader extends fb.TableReader<ArmorDecodeResponse> {
  const _ArmorDecodeResponseReader();

  @override
  ArmorDecodeResponse createObject(fb.BufferContext bc, int offset) =>
      ArmorDecodeResponse._(bc, offset);
}

class ArmorDecodeResponseBuilder {
  ArmorDecodeResponseBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(2);
  }

  int addOutputOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }

  int addErrorOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class ArmorDecodeResponseObjectBuilder extends fb.ObjectBuilder {
  final ArmorMetadataObjectBuilder? _output;
  final String? _error;

  ArmorDecodeResponseObjectBuilder({
    ArmorMetadataObjectBuilder? output,
    String? error,
  })  : _output = output,
        _error = error;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? outputOffset = _output?.getOrCreateOffset(fbBuilder);
    final int? errorOffset =
        _error == null ? null : fbBuilder.writeString(_error!);
    fbBuilder.startTable(2);
    fbBuilder.addOffset(0, outputOffset);
    fbBuilder.addOffset(1, errorOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}

class ArmorMetadata {
  ArmorMetadata._(this._bc, this._bcOffset);
  factory ArmorMetadata(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<ArmorMetadata> reader = _ArmorMetadataReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  List<int>? get body =>
      const fb.Uint8ListReader().vTableGetNullable(_bc, _bcOffset, 4);
  String? get type =>
      const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 6);

  @override
  String toString() {
    return 'ArmorMetadata{body: ${body}, type: ${type}}';
  }
}

class _ArmorMetadataReader extends fb.TableReader<ArmorMetadata> {
  const _ArmorMetadataReader();

  @override
  ArmorMetadata createObject(fb.BufferContext bc, int offset) =>
      ArmorMetadata._(bc, offset);
}

class ArmorMetadataBuilder {
  ArmorMetadataBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(2);
  }

  int addBodyOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }

  int addTypeOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class ArmorMetadataObjectBuilder extends fb.ObjectBuilder {
  final List<int>? _body;
  final String? _type;

  ArmorMetadataObjectBuilder({
    List<int>? body,
    String? type,
  })  : _body = body,
        _type = type;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? bodyOffset =
        _body == null ? null : fbBuilder.writeListUint8(_body!);
    final int? typeOffset =
        _type == null ? null : fbBuilder.writeString(_type!);
    fbBuilder.startTable(2);
    fbBuilder.addOffset(0, bodyOffset);
    fbBuilder.addOffset(1, typeOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}

class KeyPairResponse {
  KeyPairResponse._(this._bc, this._bcOffset);
  factory KeyPairResponse(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<KeyPairResponse> reader = _KeyPairResponseReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  KeyPair? get output => KeyPair.reader.vTableGetNullable(_bc, _bcOffset, 4);
  String? get error =>
      const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 6);

  @override
  String toString() {
    return 'KeyPairResponse{output: ${output}, error: ${error}}';
  }
}

class _KeyPairResponseReader extends fb.TableReader<KeyPairResponse> {
  const _KeyPairResponseReader();

  @override
  KeyPairResponse createObject(fb.BufferContext bc, int offset) =>
      KeyPairResponse._(bc, offset);
}

class KeyPairResponseBuilder {
  KeyPairResponseBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(2);
  }

  int addOutputOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }

  int addErrorOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class KeyPairResponseObjectBuilder extends fb.ObjectBuilder {
  final KeyPairObjectBuilder? _output;
  final String? _error;

  KeyPairResponseObjectBuilder({
    KeyPairObjectBuilder? output,
    String? error,
  })  : _output = output,
        _error = error;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? outputOffset = _output?.getOrCreateOffset(fbBuilder);
    final int? errorOffset =
        _error == null ? null : fbBuilder.writeString(_error!);
    fbBuilder.startTable(2);
    fbBuilder.addOffset(0, outputOffset);
    fbBuilder.addOffset(1, errorOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}

class KeyPair {
  KeyPair._(this._bc, this._bcOffset);
  factory KeyPair(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<KeyPair> reader = _KeyPairReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  String? get publicKey =>
      const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  String? get privateKey =>
      const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 6);

  @override
  String toString() {
    return 'KeyPair{publicKey: ${publicKey}, privateKey: ${privateKey}}';
  }
}

class _KeyPairReader extends fb.TableReader<KeyPair> {
  const _KeyPairReader();

  @override
  KeyPair createObject(fb.BufferContext bc, int offset) =>
      KeyPair._(bc, offset);
}

class KeyPairBuilder {
  KeyPairBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(2);
  }

  int addPublicKeyOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }

  int addPrivateKeyOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class KeyPairObjectBuilder extends fb.ObjectBuilder {
  final String? _publicKey;
  final String? _privateKey;

  KeyPairObjectBuilder({
    String? publicKey,
    String? privateKey,
  })  : _publicKey = publicKey,
        _privateKey = privateKey;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? publicKeyOffset =
        _publicKey == null ? null : fbBuilder.writeString(_publicKey!);
    final int? privateKeyOffset =
        _privateKey == null ? null : fbBuilder.writeString(_privateKey!);
    fbBuilder.startTable(2);
    fbBuilder.addOffset(0, publicKeyOffset);
    fbBuilder.addOffset(1, privateKeyOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}

class PublicKeyMetadataResponse {
  PublicKeyMetadataResponse._(this._bc, this._bcOffset);
  factory PublicKeyMetadataResponse(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<PublicKeyMetadataResponse> reader =
      _PublicKeyMetadataResponseReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  PublicKeyMetadata? get output =>
      PublicKeyMetadata.reader.vTableGetNullable(_bc, _bcOffset, 4);
  String? get error =>
      const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 6);

  @override
  String toString() {
    return 'PublicKeyMetadataResponse{output: ${output}, error: ${error}}';
  }
}

class _PublicKeyMetadataResponseReader
    extends fb.TableReader<PublicKeyMetadataResponse> {
  const _PublicKeyMetadataResponseReader();

  @override
  PublicKeyMetadataResponse createObject(fb.BufferContext bc, int offset) =>
      PublicKeyMetadataResponse._(bc, offset);
}

class PublicKeyMetadataResponseBuilder {
  PublicKeyMetadataResponseBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(2);
  }

  int addOutputOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }

  int addErrorOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class PublicKeyMetadataResponseObjectBuilder extends fb.ObjectBuilder {
  final PublicKeyMetadataObjectBuilder? _output;
  final String? _error;

  PublicKeyMetadataResponseObjectBuilder({
    PublicKeyMetadataObjectBuilder? output,
    String? error,
  })  : _output = output,
        _error = error;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? outputOffset = _output?.getOrCreateOffset(fbBuilder);
    final int? errorOffset =
        _error == null ? null : fbBuilder.writeString(_error!);
    fbBuilder.startTable(2);
    fbBuilder.addOffset(0, outputOffset);
    fbBuilder.addOffset(1, errorOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}

class PrivateKeyMetadataResponse {
  PrivateKeyMetadataResponse._(this._bc, this._bcOffset);
  factory PrivateKeyMetadataResponse(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<PrivateKeyMetadataResponse> reader =
      _PrivateKeyMetadataResponseReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  PrivateKeyMetadata? get output =>
      PrivateKeyMetadata.reader.vTableGetNullable(_bc, _bcOffset, 4);
  String? get error =>
      const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 6);

  @override
  String toString() {
    return 'PrivateKeyMetadataResponse{output: ${output}, error: ${error}}';
  }
}

class _PrivateKeyMetadataResponseReader
    extends fb.TableReader<PrivateKeyMetadataResponse> {
  const _PrivateKeyMetadataResponseReader();

  @override
  PrivateKeyMetadataResponse createObject(fb.BufferContext bc, int offset) =>
      PrivateKeyMetadataResponse._(bc, offset);
}

class PrivateKeyMetadataResponseBuilder {
  PrivateKeyMetadataResponseBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(2);
  }

  int addOutputOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }

  int addErrorOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class PrivateKeyMetadataResponseObjectBuilder extends fb.ObjectBuilder {
  final PrivateKeyMetadataObjectBuilder? _output;
  final String? _error;

  PrivateKeyMetadataResponseObjectBuilder({
    PrivateKeyMetadataObjectBuilder? output,
    String? error,
  })  : _output = output,
        _error = error;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? outputOffset = _output?.getOrCreateOffset(fbBuilder);
    final int? errorOffset =
        _error == null ? null : fbBuilder.writeString(_error!);
    fbBuilder.startTable(2);
    fbBuilder.addOffset(0, outputOffset);
    fbBuilder.addOffset(1, errorOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}

class Identity {
  Identity._(this._bc, this._bcOffset);
  factory Identity(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<Identity> reader = _IdentityReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  String? get id =>
      const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  String? get comment =>
      const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 6);
  String? get email =>
      const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 8);
  String? get name =>
      const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 10);

  @override
  String toString() {
    return 'Identity{id: ${id}, comment: ${comment}, email: ${email}, name: ${name}}';
  }
}

class _IdentityReader extends fb.TableReader<Identity> {
  const _IdentityReader();

  @override
  Identity createObject(fb.BufferContext bc, int offset) =>
      Identity._(bc, offset);
}

class IdentityBuilder {
  IdentityBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(4);
  }

  int addIdOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }

  int addCommentOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }

  int addEmailOffset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }

  int addNameOffset(int? offset) {
    fbBuilder.addOffset(3, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class IdentityObjectBuilder extends fb.ObjectBuilder {
  final String? _id;
  final String? _comment;
  final String? _email;
  final String? _name;

  IdentityObjectBuilder({
    String? id,
    String? comment,
    String? email,
    String? name,
  })  : _id = id,
        _comment = comment,
        _email = email,
        _name = name;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? idOffset = _id == null ? null : fbBuilder.writeString(_id!);
    final int? commentOffset =
        _comment == null ? null : fbBuilder.writeString(_comment!);
    final int? emailOffset =
        _email == null ? null : fbBuilder.writeString(_email!);
    final int? nameOffset =
        _name == null ? null : fbBuilder.writeString(_name!);
    fbBuilder.startTable(4);
    fbBuilder.addOffset(0, idOffset);
    fbBuilder.addOffset(1, commentOffset);
    fbBuilder.addOffset(2, emailOffset);
    fbBuilder.addOffset(3, nameOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}

class PublicKeyMetadata {
  PublicKeyMetadata._(this._bc, this._bcOffset);
  factory PublicKeyMetadata(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<PublicKeyMetadata> reader = _PublicKeyMetadataReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  String? get algorithm =>
      const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  String? get keyId =>
      const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 6);
  String? get keyIdShort =>
      const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 8);
  String? get creationTime =>
      const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 10);
  String? get fingerprint =>
      const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 12);
  String? get keyIdNumeric =>
      const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 14);
  bool get isSubKey =>
      const fb.BoolReader().vTableGet(_bc, _bcOffset, 16, false);
  bool get canSign =>
      const fb.BoolReader().vTableGet(_bc, _bcOffset, 18, false);
  bool get canEncrypt =>
      const fb.BoolReader().vTableGet(_bc, _bcOffset, 20, false);
  List<Identity>? get identities =>
      const fb.ListReader<Identity>(Identity.reader)
          .vTableGetNullable(_bc, _bcOffset, 22);
  List<PublicKeyMetadata>? get subKeys =>
      const fb.ListReader<PublicKeyMetadata>(PublicKeyMetadata.reader)
          .vTableGetNullable(_bc, _bcOffset, 24);

  @override
  String toString() {
    return 'PublicKeyMetadata{algorithm: ${algorithm}, keyId: ${keyId}, keyIdShort: ${keyIdShort}, creationTime: ${creationTime}, fingerprint: ${fingerprint}, keyIdNumeric: ${keyIdNumeric}, isSubKey: ${isSubKey}, canSign: ${canSign}, canEncrypt: ${canEncrypt}, identities: ${identities}, subKeys: ${subKeys}}';
  }
}

class _PublicKeyMetadataReader extends fb.TableReader<PublicKeyMetadata> {
  const _PublicKeyMetadataReader();

  @override
  PublicKeyMetadata createObject(fb.BufferContext bc, int offset) =>
      PublicKeyMetadata._(bc, offset);
}

class PublicKeyMetadataBuilder {
  PublicKeyMetadataBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(11);
  }

  int addAlgorithmOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }

  int addKeyIdOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }

  int addKeyIdShortOffset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }

  int addCreationTimeOffset(int? offset) {
    fbBuilder.addOffset(3, offset);
    return fbBuilder.offset;
  }

  int addFingerprintOffset(int? offset) {
    fbBuilder.addOffset(4, offset);
    return fbBuilder.offset;
  }

  int addKeyIdNumericOffset(int? offset) {
    fbBuilder.addOffset(5, offset);
    return fbBuilder.offset;
  }

  int addIsSubKey(bool? isSubKey) {
    fbBuilder.addBool(6, isSubKey);
    return fbBuilder.offset;
  }

  int addCanSign(bool? canSign) {
    fbBuilder.addBool(7, canSign);
    return fbBuilder.offset;
  }

  int addCanEncrypt(bool? canEncrypt) {
    fbBuilder.addBool(8, canEncrypt);
    return fbBuilder.offset;
  }

  int addIdentitiesOffset(int? offset) {
    fbBuilder.addOffset(9, offset);
    return fbBuilder.offset;
  }

  int addSubKeysOffset(int? offset) {
    fbBuilder.addOffset(10, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class PublicKeyMetadataObjectBuilder extends fb.ObjectBuilder {
  final String? _algorithm;
  final String? _keyId;
  final String? _keyIdShort;
  final String? _creationTime;
  final String? _fingerprint;
  final String? _keyIdNumeric;
  final bool? _isSubKey;
  final bool? _canSign;
  final bool? _canEncrypt;
  final List<IdentityObjectBuilder>? _identities;
  final List<PublicKeyMetadataObjectBuilder>? _subKeys;

  PublicKeyMetadataObjectBuilder({
    String? algorithm,
    String? keyId,
    String? keyIdShort,
    String? creationTime,
    String? fingerprint,
    String? keyIdNumeric,
    bool? isSubKey,
    bool? canSign,
    bool? canEncrypt,
    List<IdentityObjectBuilder>? identities,
    List<PublicKeyMetadataObjectBuilder>? subKeys,
  })  : _algorithm = algorithm,
        _keyId = keyId,
        _keyIdShort = keyIdShort,
        _creationTime = creationTime,
        _fingerprint = fingerprint,
        _keyIdNumeric = keyIdNumeric,
        _isSubKey = isSubKey,
        _canSign = canSign,
        _canEncrypt = canEncrypt,
        _identities = identities,
        _subKeys = subKeys;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? algorithmOffset =
        _algorithm == null ? null : fbBuilder.writeString(_algorithm!);
    final int? keyIdOffset =
        _keyId == null ? null : fbBuilder.writeString(_keyId!);
    final int? keyIdShortOffset =
        _keyIdShort == null ? null : fbBuilder.writeString(_keyIdShort!);
    final int? creationTimeOffset =
        _creationTime == null ? null : fbBuilder.writeString(_creationTime!);
    final int? fingerprintOffset =
        _fingerprint == null ? null : fbBuilder.writeString(_fingerprint!);
    final int? keyIdNumericOffset =
        _keyIdNumeric == null ? null : fbBuilder.writeString(_keyIdNumeric!);
    final int? identitiesOffset = _identities == null
        ? null
        : fbBuilder.writeList(
            _identities!.map((b) => b.getOrCreateOffset(fbBuilder)).toList());
    final int? subKeysOffset = _subKeys == null
        ? null
        : fbBuilder.writeList(
            _subKeys!.map((b) => b.getOrCreateOffset(fbBuilder)).toList());
    fbBuilder.startTable(11);
    fbBuilder.addOffset(0, algorithmOffset);
    fbBuilder.addOffset(1, keyIdOffset);
    fbBuilder.addOffset(2, keyIdShortOffset);
    fbBuilder.addOffset(3, creationTimeOffset);
    fbBuilder.addOffset(4, fingerprintOffset);
    fbBuilder.addOffset(5, keyIdNumericOffset);
    fbBuilder.addBool(6, _isSubKey);
    fbBuilder.addBool(7, _canSign);
    fbBuilder.addBool(8, _canEncrypt);
    fbBuilder.addOffset(9, identitiesOffset);
    fbBuilder.addOffset(10, subKeysOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}

class PrivateKeyMetadata {
  PrivateKeyMetadata._(this._bc, this._bcOffset);
  factory PrivateKeyMetadata(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<PrivateKeyMetadata> reader =
      _PrivateKeyMetadataReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  String? get keyId =>
      const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  String? get keyIdShort =>
      const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 6);
  String? get creationTime =>
      const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 8);
  String? get fingerprint =>
      const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 10);
  String? get keyIdNumeric =>
      const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 12);
  bool get isSubKey =>
      const fb.BoolReader().vTableGet(_bc, _bcOffset, 14, false);
  bool get encrypted =>
      const fb.BoolReader().vTableGet(_bc, _bcOffset, 16, false);
  bool get canSign =>
      const fb.BoolReader().vTableGet(_bc, _bcOffset, 18, false);
  List<Identity>? get identities =>
      const fb.ListReader<Identity>(Identity.reader)
          .vTableGetNullable(_bc, _bcOffset, 20);
  List<PrivateKeyMetadata>? get subKeys =>
      const fb.ListReader<PrivateKeyMetadata>(PrivateKeyMetadata.reader)
          .vTableGetNullable(_bc, _bcOffset, 22);

  @override
  String toString() {
    return 'PrivateKeyMetadata{keyId: ${keyId}, keyIdShort: ${keyIdShort}, creationTime: ${creationTime}, fingerprint: ${fingerprint}, keyIdNumeric: ${keyIdNumeric}, isSubKey: ${isSubKey}, encrypted: ${encrypted}, canSign: ${canSign}, identities: ${identities}, subKeys: ${subKeys}}';
  }
}

class _PrivateKeyMetadataReader extends fb.TableReader<PrivateKeyMetadata> {
  const _PrivateKeyMetadataReader();

  @override
  PrivateKeyMetadata createObject(fb.BufferContext bc, int offset) =>
      PrivateKeyMetadata._(bc, offset);
}

class PrivateKeyMetadataBuilder {
  PrivateKeyMetadataBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(10);
  }

  int addKeyIdOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }

  int addKeyIdShortOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }

  int addCreationTimeOffset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }

  int addFingerprintOffset(int? offset) {
    fbBuilder.addOffset(3, offset);
    return fbBuilder.offset;
  }

  int addKeyIdNumericOffset(int? offset) {
    fbBuilder.addOffset(4, offset);
    return fbBuilder.offset;
  }

  int addIsSubKey(bool? isSubKey) {
    fbBuilder.addBool(5, isSubKey);
    return fbBuilder.offset;
  }

  int addEncrypted(bool? encrypted) {
    fbBuilder.addBool(6, encrypted);
    return fbBuilder.offset;
  }

  int addCanSign(bool? canSign) {
    fbBuilder.addBool(7, canSign);
    return fbBuilder.offset;
  }

  int addIdentitiesOffset(int? offset) {
    fbBuilder.addOffset(8, offset);
    return fbBuilder.offset;
  }

  int addSubKeysOffset(int? offset) {
    fbBuilder.addOffset(9, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class PrivateKeyMetadataObjectBuilder extends fb.ObjectBuilder {
  final String? _keyId;
  final String? _keyIdShort;
  final String? _creationTime;
  final String? _fingerprint;
  final String? _keyIdNumeric;
  final bool? _isSubKey;
  final bool? _encrypted;
  final bool? _canSign;
  final List<IdentityObjectBuilder>? _identities;
  final List<PrivateKeyMetadataObjectBuilder>? _subKeys;

  PrivateKeyMetadataObjectBuilder({
    String? keyId,
    String? keyIdShort,
    String? creationTime,
    String? fingerprint,
    String? keyIdNumeric,
    bool? isSubKey,
    bool? encrypted,
    bool? canSign,
    List<IdentityObjectBuilder>? identities,
    List<PrivateKeyMetadataObjectBuilder>? subKeys,
  })  : _keyId = keyId,
        _keyIdShort = keyIdShort,
        _creationTime = creationTime,
        _fingerprint = fingerprint,
        _keyIdNumeric = keyIdNumeric,
        _isSubKey = isSubKey,
        _encrypted = encrypted,
        _canSign = canSign,
        _identities = identities,
        _subKeys = subKeys;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? keyIdOffset =
        _keyId == null ? null : fbBuilder.writeString(_keyId!);
    final int? keyIdShortOffset =
        _keyIdShort == null ? null : fbBuilder.writeString(_keyIdShort!);
    final int? creationTimeOffset =
        _creationTime == null ? null : fbBuilder.writeString(_creationTime!);
    final int? fingerprintOffset =
        _fingerprint == null ? null : fbBuilder.writeString(_fingerprint!);
    final int? keyIdNumericOffset =
        _keyIdNumeric == null ? null : fbBuilder.writeString(_keyIdNumeric!);
    final int? identitiesOffset = _identities == null
        ? null
        : fbBuilder.writeList(
            _identities!.map((b) => b.getOrCreateOffset(fbBuilder)).toList());
    final int? subKeysOffset = _subKeys == null
        ? null
        : fbBuilder.writeList(
            _subKeys!.map((b) => b.getOrCreateOffset(fbBuilder)).toList());
    fbBuilder.startTable(10);
    fbBuilder.addOffset(0, keyIdOffset);
    fbBuilder.addOffset(1, keyIdShortOffset);
    fbBuilder.addOffset(2, creationTimeOffset);
    fbBuilder.addOffset(3, fingerprintOffset);
    fbBuilder.addOffset(4, keyIdNumericOffset);
    fbBuilder.addBool(5, _isSubKey);
    fbBuilder.addBool(6, _encrypted);
    fbBuilder.addBool(7, _canSign);
    fbBuilder.addOffset(8, identitiesOffset);
    fbBuilder.addOffset(9, subKeysOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
